plugins {
    id 'maven-publish'
}

allprojects {
    ext {
        artifactName = 'protobufs'
    }
    group = 'org.opensearch'
    def build = new Properties()
    file("version.properties").withInputStream { build.load(it) }
    version = build.getProperty("version")
    var isSnapshot = System.getProperty("build.snapshot", "true")
    if (isSnapshot.toBoolean() && !version.endsWith("SNAPSHOT")) {
        version = version + "-SNAPSHOT"
    } else if (!isSnapshot && version.endsWith("SNAPSHOT")) {
        throw GradleException("Expecting release (non-SNAPSHOT) build but version is not set accordingly: " + version)
    }
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        create(MavenPublication) {
            groupId = group
            artifactId = artifactName
            artifact "./generated/maven/publish/${artifactName}-${version}.jar"
            artifact(source: "./generated/maven/publish/${artifactName}-${version}-sources.jar", classifier: 'sources')
            artifact(source: "./generated/maven/publish/${artifactName}-${version}-javadoc.jar", classifier: 'javadoc')
        }
    }

    repositories {
        maven{
            name = 'Snapshots'
            url = System.getenv("MAVEN_SNAPSHOTS_S3_REPO")
            credentials(AwsCredentials) {
                accessKey = System.getenv("AWS_ACCESS_KEY_ID")
                secretKey = System.getenv("AWS_SECRET_ACCESS_KEY")
                sessionToken = System.getenv("AWS_SESSION_TOKEN")
            }
        }
        maven {
            name = "localRepo"
            url = "${rootProject.buildDir}/repository"
        }
    }
}

// Override maven publish generated pom with the one generated by ./tools/java/package_proto_jar.sh
tasks.named('generatePomFileForCreatePublication') {
    doLast {
        def generatedPom = file("$rootProject.buildDir/publications/create/pom-default.xml")
        generatedPom.delete()
        generatedPom << file("./generated/maven/publish/${artifactName}-${version}.pom").text
    }
}

task clean(type: Delete) {
    delete "${rootProject.buildDir}"
}

task cleanGenerated(type: Delete) {
    delete "${rootProject.projectDir}/generated"
}
