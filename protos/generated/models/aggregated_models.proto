/*
   This is auto generated by OpenAPI Generator. The source of OpenAPI is opensearch-api-specification
*/

syntax = "proto3";

package org.opensearch.protobufs;

message ObjectMap {
  map<string, Value> fields = 1;

  message Value {
    oneof value {
      int32 int32 = 1;
      int64 int64 = 2;
      float float = 3;
      double double = 4;
      string string = 5;
      bool bool = 6;
      ObjectMap object_map = 7;
      ListValue list_value = 8;
    }
  }

  // `ListValue` is a wrapper around a repeated field of values.
  // The JSON representation for `ListValue` is JSON array.
  message ListValue {
    // Repeated field of dynamically typed values.
    repeated Value value = 1;
  }
}

message GeneralNumber {
  oneof value {
    int32 int32_value = 1;
    int64 int64_value = 2;
    float float_value = 3;
    double double_value = 4;
  }
}

enum NullValue {
  NULL_VALUE_UNSPECIFIED = 0;
  NULL_VALUE_NULL = 1;
}
message AdjacencyMatrixAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseAdjacencyMatrixBucketAllOfBuckets buckets = 2;
}
message AdjacencyMatrixAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // Filters used to create buckets. At least one filter is required.
  map<string, QueryContainer> filters = 5;
}
message AdjacencyMatrixBucket {
  int64 doc_count = 1;

  string key = 2;
}
message Aggregate {
  optional AdjacencyMatrixAggregate adjacency_matrix = 1;

  optional AutoDateHistogramAggregate auto_date_histogram = 2;

  optional AvgAggregate avg = 3;

  optional BoxPlotAggregate box_plot = 4;

  optional BucketMetricValueAggregate bucket_metric_value = 5;

  optional CardinalityAggregate cardinality = 6;

  optional ChildrenAggregate children = 7;

  optional CompositeAggregate composite = 8;

  optional DateHistogramAggregate date_histogram = 9;

  optional DateRangeAggregate date_range = 10;

  optional DerivativeAggregate derivative = 11;

  optional DoubleTermsAggregate dterms = 12;

  optional ExtendedStatsAggregate extended_stats = 13;

  optional ExtendedStatsBucketAggregate extended_stats_bucket = 14;

  optional FilterAggregate filter = 15;

  optional FiltersAggregate filters = 16;

  optional GeoBoundsAggregate geo_bounds = 17;

  optional GeoCentroidAggregate geo_centroid = 18;

  optional GeoDistanceAggregate geo_distance = 19;

  optional GeoHashGridAggregate geohash_grid = 20;

  optional GeoTileGridAggregate geotile_grid = 21;

  optional GlobalAggregate global = 22;

  optional HdrPercentilesAggregate hdr_percentiles = 23;

  optional HdrPercentileRanksAggregate hdr_percentile_ranks = 24;

  optional HistogramAggregate histogram = 25;

  optional IpRangeAggregate ip_range = 26;

  optional LongRareTermsAggregate lrareterms = 27;

  optional LongTermsAggregate lterms = 28;

  optional MatrixStatsAggregate matrix_stats = 29;

  optional MaxAggregate max = 30;

  optional MedianAbsoluteDeviationAggregate median_absolute_deviation = 31;

  optional MinAggregate min = 32;

  optional MissingAggregate missing = 33;

  optional MultiTermsAggregate multi_terms = 34;

  optional NestedAggregate nested = 35;

  optional ParentAggregate parent = 36;

  optional PercentilesBucketAggregate percentiles_bucket = 37;

  optional RangeAggregate range = 38;

  optional RateAggregate rate = 39;

  optional ReverseNestedAggregate reverse_nested = 40;

  optional SamplerAggregate sampler = 41;

  optional ScriptedMetricAggregate scripted_metric = 42;

  optional SignificantLongTermsAggregate siglterms = 43;

  optional SignificantStringTermsAggregate sigsterms = 44;

  optional CumulativeCardinalityAggregate simple_long_value = 45;

  optional SimpleValueAggregate simple_value = 46;

  optional StatsAggregate stats = 47;

  optional StatsBucketAggregate stats_bucket = 48;

  optional StringRareTermsAggregate srareterms = 49;

  optional StringTermsAggregate sterms = 50;

  optional SumAggregate sum = 51;

  optional TDigestPercentilesAggregate tdigest_percentiles = 52;

  optional TDigestPercentileRanksAggregate tdigest_percentile_ranks = 53;

  optional TTestAggregate t_test = 54;

  optional TopHitsAggregate top_hits = 55;

  optional UnmappedRareTermsAggregate umrareterms = 56;

  optional UnmappedSignificantTermsAggregate umsigterms = 57;

  optional UnmappedTermsAggregate umterms = 58;

  optional ValueCountAggregate value_count = 59;

  optional VariableWidthHistogramAggregate variable_width_histogram = 60;

  optional WeightedAvgAggregate weighted_avg = 61;
}
message AggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;
}
message Aggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;
}
message AggregationBreakdown {
  int64 build_aggregation = 1;

  int64 build_aggregation_count = 2;

  int64 build_leaf_collector = 3;

  int64 build_leaf_collector_count = 4;

  int64 collect = 5;

  int64 collect_count = 6;

  int64 initialize = 7;

  int64 initialize_count = 8;

  optional int64 post_collection = 9;

  optional int64 post_collection_count = 10;

  int64 reduce = 11;

  int64 reduce_count = 12;
}
message AggregationContainer {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  AdjacencyMatrixAggregation adjacency_matrix = 2;

  AutoDateHistogramAggregation auto_date_histogram = 3;

  AverageAggregation avg = 4;

  AverageBucketAggregation avg_bucket = 5;

  BoxplotAggregation boxplot = 6;

  BucketScriptAggregation bucket_script = 7;

  BucketSelectorAggregation bucket_selector = 8;

  BucketSortAggregation bucket_sort = 9;

  CardinalityAggregation cardinality = 10;

  ChildrenAggregation children = 11;

  CompositeAggregation composite = 12;

  CumulativeCardinalityAggregation cumulative_cardinality = 13;

  CumulativeSumAggregation cumulative_sum = 14;

  DateHistogramAggregation date_histogram = 15;

  DateRangeAggregation date_range = 16;

  DerivativeAggregation derivative = 17;

  DiversifiedSamplerAggregation diversified_sampler = 18;

  ExtendedStatsAggregation extended_stats = 19;

  ExtendedStatsBucketAggregation extended_stats_bucket = 20;

  QueryContainer filter = 21;

  FiltersAggregation filters = 22;

  GeoBoundsAggregation geo_bounds = 23;

  GeoCentroidAggregation geo_centroid = 24;

  GeoDistanceAggregation geo_distance = 25;

  GeoHashGridAggregation geohash_grid = 26;

  GeoTileGridAggregation geotile_grid = 27;

  GlobalAggregation global = 28;

  HistogramAggregation histogram = 29;

  IpRangeAggregation ip_range = 30;

  MatrixStatsAggregation matrix_stats = 31;

  MaxAggregation max = 32;

  MaxBucketAggregation max_bucket = 33;

  MedianAbsoluteDeviationAggregation median_absolute_deviation = 34;

  MinAggregation min = 35;

  MinBucketAggregation min_bucket = 36;

  MissingAggregation missing = 37;

  MovingAverageAggregation moving_avg = 38;

  MovingPercentilesAggregation moving_percentiles = 39;

  MovingFunctionAggregation moving_fn = 40;

  MultiTermsAggregation multi_terms = 41;

  NestedAggregation nested = 42;

  NormalizeAggregation normalize = 43;

  ParentAggregation parent = 44;

  PercentileRanksAggregation percentile_ranks = 45;

  PercentilesAggregation percentiles = 46;

  PercentilesBucketAggregation percentiles_bucket = 47;

  RangeAggregation range = 48;

  RareTermsAggregation rare_terms = 49;

  RateAggregation rate = 50;

  ReverseNestedAggregation reverse_nested = 51;

  SamplerAggregation sampler = 52;

  ScriptedMetricAggregation scripted_metric = 53;

  SerialDifferencingAggregation serial_diff = 54;

  SignificantTermsAggregation significant_terms = 55;

  SignificantTextAggregation significant_text = 56;

  StatsAggregation stats = 57;

  StatsBucketAggregation stats_bucket = 58;

  SumAggregation sum = 59;

  SumBucketAggregation sum_bucket = 60;

  TermsAggregation terms = 61;

  TopHitsAggregation top_hits = 62;

  TTestAggregation t_test = 63;

  ValueCountAggregation value_count = 64;

  WeightedAverageAggregation weighted_avg = 65;

  VariableWidthHistogramAggregation variable_width_histogram = 66;
}
message AggregationProfile {
  AggregationBreakdown breakdown = 1;

  string description = 2;

  // Time unit for nanoseconds.
  int64 time_in_nanos = 3;

  string type = 4;

  optional AggregationProfileDebug debug = 5;

  repeated AggregationProfile children = 6;
}
message AggregationProfileDebug {
  optional int32 segments_with_multi_valued_ords = 1;

  optional string collection_strategy = 2;

  optional int32 segments_with_single_valued_ords = 3;

  optional int32 total_buckets = 4;

  optional int32 built_buckets = 5;

  optional string result_strategy = 6;

  optional bool has_filter = 7;

  optional string delegate = 8;

  optional AggregationProfileDelegateDebug delegate_debug = 9;

  optional int32 chars_fetched = 10;

  optional int32 extract_count = 11;

  optional int32 extract_ns = 12;

  optional int32 values_fetched = 13;

  optional int32 collect_analyzed_ns = 14;

  optional int32 collect_analyzed_count = 15;

  optional int32 surviving_buckets = 16;

  optional int32 ordinals_collectors_used = 17;

  optional int32 ordinals_collectors_overhead_too_high = 18;

  optional int32 string_hashing_collectors_used = 19;

  optional int32 numeric_collectors_used = 20;

  optional int32 empty_collectors_used = 21;

  repeated string deferred_aggregators = 22;

  optional string map_reducer = 23;
}
message AggregationProfileDelegateDebug {
  optional int32 segments_with_doc_count_field = 1;

  optional int32 segments_with_deleted_docs = 2;

  repeated AggregationProfileDelegateDebugFilter filters = 3;

  optional int32 segments_counted = 4;

  optional int32 segments_collected = 5;
}
message AggregationProfileDelegateDebugFilter {
  optional int32 results_from_metadata = 1;

  optional string query = 2;

  optional string specialized_for = 3;

  optional int32 segments_counted_in_constant_time = 4;
}
message AggregationRange {
  optional AggregationRangeFrom from = 1;

  // Custom key to return the range with.
  optional string key = 2;

  optional AggregationRangeTo to = 3;
}
message AggregationRangeFrom {
  oneof aggregation_range_from {
    double double = 1;

    string string = 2;

    NullValue null_value = 3;
  }
}
message AggregationRangeTo {
  oneof aggregation_range_to {
    double double = 1;

    string string = 2;

    NullValue null_value = 3;
  }
}
message Analyzer {
  oneof analyzer {
    CustomAnalyzer custom_analyzer = 1;

    FingerprintAnalyzer fingerprint_analyzer = 2;

    KeywordAnalyzer keyword_analyzer = 3;

    LanguageAnalyzer language_analyzer = 4;

    NoriAnalyzer nori_analyzer = 5;

    PatternAnalyzer pattern_analyzer = 6;

    SimpleAnalyzer simple_analyzer = 7;

    StandardAnalyzer standard_analyzer = 8;

    StopAnalyzer stop_analyzer = 9;

    WhitespaceAnalyzer whitespace_analyzer = 10;

    IcuAnalyzer icu_analyzer = 11;

    KuromojiAnalyzer kuromoji_analyzer = 12;

    SnowballAnalyzer snowball_analyzer = 13;

    DutchAnalyzer dutch_analyzer = 14;

    SmartcnAnalyzer smartcn_analyzer = 15;

    CjkAnalyzer cjk_analyzer = 16;

    PhoneAnalyzer phone_analyzer = 17;

    PhoneSearchAnalyzer phone_search_analyzer = 18;
  }
}
message ArrayPercentilesItem {
  string key = 1;

  ArrayPercentilesItemValue value = 2;

  optional string value_as_string = 3;
}
message ArrayPercentilesItemArray {
  repeated ArrayPercentilesItem array_percentiles_item_array = 1;
}
message ArrayPercentilesItemValue {
  oneof array_percentiles_item_value {
    double double = 1;

    NullValue null_value = 2;
  }
}
message AutoDateHistogramAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseDateHistogramBucketAllOfBuckets buckets = 2;

  // A date histogram interval, similar to `Duration`, with support for additional units: `w` (week), `M` (month), `q` (quarter), and `y` (year).
  string interval = 3;
}
message AutoDateHistogramAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The target number of buckets.
  optional int32 buckets = 5;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 6;

  // The date format used to format `key_as_string` in the response. If no `format` is specified, the first date format specified in the field mapping is used.
  optional string format = 7;

  optional MinimumInterval minimum_interval = 8;

  optional string missing = 9;

  // Time zone specified as a ISO 8601 UTC offset.
  optional string offset = 10;

  optional ObjectMap params = 11;

  optional Script script = 12;

  // The time zone identifier.
  optional string time_zone = 13;
}
message AverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
message AverageBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message AvgAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message BoolQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The clause (query) must appear in matching documents. However, unlike `must`, the score of the query will be ignored.
  repeated QueryContainer filter = 3;

  optional MinimumShouldMatch minimum_should_match = 4;

  // The clause (query) must appear in matching documents and will contribute to the score.
  repeated QueryContainer must = 5;

  // The clause (query) must not appear in the matching documents. Because scoring is ignored, a score of `0` is returned for all documents.
  repeated QueryContainer must_not = 6;

  // The clause (query) should appear in the matching document.
  repeated QueryContainer should = 7;

  // Ensures correct behavior when a query contains only `must_not` clauses. By default set to true, OpenSearch adds a match-all clause to ensure results are returned from Lucene, with the `must_not` conditions applied as filters. If set to false, the query may return no results, as Lucene typically requires at least one positive condition.
  optional bool adjust_pure_negative = 8;
}
message BoostingQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Floating point number between 0 and 1.0 used to decrease the relevance scores of documents matching the `negative` query.
  float negative_boost = 3;

  QueryContainer negative = 4;

  QueryContainer positive = 5;
}
enum BoundaryScanner {
  BOUNDARY_SCANNER_UNSPECIFIED = 0;
  BOUNDARY_SCANNER_CHARS = 1;
  BOUNDARY_SCANNER_SENTENCE = 2;
  BOUNDARY_SCANNER_WORD = 3;
}
message BoxPlotAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  double min = 2;

  double max = 3;

  double q1 = 4;

  double q2 = 5;

  double q3 = 6;

  double lower = 7;

  double upper = 8;

  optional string min_as_string = 9;

  optional string max_as_string = 10;

  optional string q1_as_string = 11;

  optional string q2_as_string = 12;

  optional string q3_as_string = 13;

  optional string lower_as_string = 14;

  optional string upper_as_string = 15;
}
message BoxplotAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  // Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling control of memory usage and approximation error.
  optional double compression = 6;
}
message BucketAggregationBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;
}
message BucketMetricValueAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;

  repeated string keys = 4;
}
message BucketPathAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;
}
message BucketScriptAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional Script script = 6;
}
message BucketSelectorAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional Script script = 6;
}
message BucketSortAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Buckets in positions prior to `from` will be truncated.
  optional int32 from = 3;

  optional GapPolicy gap_policy = 4;

  // The number of buckets to return. Defaults to all buckets of the parent aggregation.
  optional int32 size = 5;

  repeated SortCombinations sort = 6;
}
message Buckets {
  oneof buckets {
    NullMap keyed = 1;

    NullArray null_array = 2;
  }
}
message BucketsPath {
  oneof buckets_path {
    StringArray string_array = 1;

    StringMap dict = 2;
  }
}
message BucketsQueryContainer {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, QueryContainer> keyed = 3;
}
enum BuiltinHighlighterType {
  BUILTIN_HIGHLIGHTER_TYPE_UNSPECIFIED = 0;
  BUILTIN_HIGHLIGHTER_TYPE_PLAIN = 1;
  BUILTIN_HIGHLIGHTER_TYPE_FVH = 2;
  BUILTIN_HIGHLIGHTER_TYPE_UNIFIED = 3;
}
enum BuiltinScriptLanguage {
  BUILTIN_SCRIPT_LANGUAGE_UNSPECIFIED = 0;
  BUILTIN_SCRIPT_LANGUAGE_EXPRESSION = 1;
  BUILTIN_SCRIPT_LANGUAGE_JAVA = 2;
  BUILTIN_SCRIPT_LANGUAGE_MUSTACHE = 3;
  BUILTIN_SCRIPT_LANGUAGE_PAINLESS = 4;
}
message BulkRequestInner {
  optional OperationContainer operation_container = 1;

  optional UpdateAction update_action = 2;

  optional ObjectMap object_map = 3;
}
message BulkResponseBase {
  bool errors = 1;

  repeated Items items = 2;

  int64 took = 3;

  optional int64 ingest_took = 4;
}
message CalendarInterval {
  oneof calendar_interval {
    Second second = 1;

    Minute minute = 2;

    Hour hour = 3;

    Day day = 4;

    Week week = 5;

    Month month = 6;

    Quarter quarter = 7;

    Year year = 8;
  }
}
message CardinalityAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 value = 2;
}
message CardinalityAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  // A unique count below which counts are expected to be close to accurate. This allows to trade memory for accuracy.
  optional int32 precision_threshold = 6;

  optional CardinalityExecutionMode execution_hint = 7;
}
enum CardinalityExecutionMode {
  CARDINALITY_EXECUTION_MODE_UNSPECIFIED = 0;
  CARDINALITY_EXECUTION_MODE_DIRECT = 1;
  CARDINALITY_EXECUTION_MODE_GLOBAL_ORDINALS = 2;
}
message ChiSquareHeuristic {
  // Set to `false` if you defined a custom background filter that represents a different set of documents that you want to compare to.
  bool background_is_superset = 1;

  // Set to `false` to filter out the terms that appear less often in the subset than in documents outside the subset.
  bool include_negatives = 2;
}
enum ChildScoreMode {
  CHILD_SCORE_MODE_UNSPECIFIED = 0;
  CHILD_SCORE_MODE_AVG = 1;
  CHILD_SCORE_MODE_MAX = 2;
  CHILD_SCORE_MODE_MIN = 3;
  CHILD_SCORE_MODE_NONE = 4;
  CHILD_SCORE_MODE_SUM = 5;
}
message ChildrenAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message ChildrenAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The name of a relation in a join field.
  optional string type = 5;
}
message CjkAnalyzer {
  optional CjkAnalyzerType type = 1;

  repeated string stopwords = 2;

  optional string stopwords_path = 3;
}
enum CjkAnalyzerType {
  CJK_ANALYZER_TYPE_UNSPECIFIED = 0;
  CJK_ANALYZER_TYPE_CJK = 1;
}
message ClusterStatistics {
  int32 skipped = 1;

  int32 successful = 2;

  int32 total = 3;
}
message Collector {
  string name = 1;

  string reason = 2;

  // Time unit for nanoseconds.
  int64 time_in_nanos = 3;

  repeated Collector children = 4;
}
enum CombinedFieldsOperator {
  COMBINED_FIELDS_OPERATOR_UNSPECIFIED = 0;
  COMBINED_FIELDS_OPERATOR_AND = 1;
  COMBINED_FIELDS_OPERATOR_OR = 2;
}
message CombinedFieldsQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // List of fields to search. Field wildcard patterns are allowed. Only `text` fields are supported, and they must all have the same search `analyzer`.
  repeated string fields = 3;

  // Text to search for in the provided `fields`. The `combined_fields` query analyzes the provided text before performing a search.
  string query = 4;

  // If `true`, match phrase queries are automatically created for multi-term synonyms.
  optional bool auto_generate_synonyms_phrase_query = 5;

  optional CombinedFieldsOperator operator = 6;

  optional MinimumShouldMatch minimum_should_match = 7;

  optional CombinedFieldsZeroTerms zero_terms_query = 8;
}
enum CombinedFieldsZeroTerms {
  COMBINED_FIELDS_ZERO_TERMS_UNSPECIFIED = 0;
  COMBINED_FIELDS_ZERO_TERMS_ALL = 1;
  COMBINED_FIELDS_ZERO_TERMS_NONE = 2;
}
message CommonTermsQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional string analyzer = 3;

  optional float cutoff_frequency = 4;

  optional Operator high_freq_operator = 5;

  optional Operator low_freq_operator = 6;

  optional MinimumShouldMatch minimum_should_match = 7;

  string query = 8;

  string field = 9;
}
message Completion {
  int32 length = 1;

  int32 offset = 2;

  string text = 3;

  repeated CompletionAllOfOptionsInner options = 4;
}
message CompletionAllOfOptionsInner {
  optional bool collate_match = 1;

  map<string, ContextArray> contexts = 2;

  optional ObjectMap fields = 3;

  string text = 4;

  optional float score = 5;

  optional string x_id = 6;

  optional string x_index = 7;

  // The routing value for the document.
  optional string x_routing = 8;

  optional float x_score = 9;

  optional ObjectMap x_source = 10;
}
message CompletionContext {
  optional double boost = 1;

  Context context = 2;

  repeated GeoHashPrecision neighbours = 3;

  optional GeoHashPrecision precision = 4;

  optional bool prefix = 5;
}
message CompletionContextArray {
  repeated CompletionContext completion_context_array = 1;
}
message CompletionSuggest {
  int32 length = 1;

  int32 offset = 2;

  string text = 3;

  repeated CompletionSuggestAllOfOptions options = 4;
}
message CompletionSuggestAllOfOptions {
  optional bool collate_match = 1;

  map<string, ContextArray> contexts = 2;

  optional ObjectMap fields = 3;

  string text = 4;

  optional float score = 5;

  optional string x_id = 6;

  optional string x_index = 7;

  // The routing value for the document.
  optional string x_routing = 8;

  optional float x_score = 9;

  optional ObjectMap x_source = 10;
}
message CompletionSuggestOption {
  optional bool collate_match = 1;

  map<string, ContextArray> contexts = 2;

  optional ObjectMap fields = 3;

  string text = 4;

  optional float score = 5;

  optional string x_id = 6;

  optional string x_index = 7;

  // The routing value for the document.
  optional string x_routing = 8;

  optional float x_score = 9;

  optional ObjectMap x_source = 10;
}
message CompletionSuggester {
  optional string analyzer = 1;

  string field = 2;

  optional int32 size = 3;

  map<string, CompletionContextArray> contexts = 4;

  optional SuggestFuzziness fuzzy = 5;

  optional string regex = 6;

  optional bool skip_duplicates = 7;
}
message CompositeAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseCompositeBucketAllOfBuckets buckets = 2;

  map<string, FieldValue> after_key = 3;
}
message CompositeAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  map<string, FieldValue> after = 5;

  // The number of composite buckets that should be returned.
  optional int32 size = 6;

  // The value sources used to build composite buckets. Keys are returned in the order of the `sources` definition.
  repeated CompositeAggregationSourceMap sources = 7;
}
message CompositeAggregationSource {
  optional CompositeTermsAggregationSource terms = 1;

  optional CompositeHistogramAggregationSource histogram = 2;

  optional CompositeDateHistogramAggregationSource date_histogram = 3;

  optional CompositeGeoTileGridAggregationSource geotile_grid = 4;
}
message CompositeAggregationSourceMap {
  map<string, CompositeAggregationSource> composite_aggregation_source_map = 1;
}
message CompositeBucket {
  int64 doc_count = 1;

  map<string, FieldValue> key = 2;
}
message CompositeDateHistogramAggregationSource {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  optional bool missing_bucket = 2;

  optional MissingOrder missing_order = 3;

  optional Script script = 4;

  optional ValueType value_type = 5;

  optional SortOrder order = 6;

  optional string format = 7;

  // A date histogram interval, similar to `Duration`, with support for additional units: `w` (week), `M` (month), `q` (quarter), and `y` (year).
  optional string calendar_interval = 8;

  // A date histogram interval, similar to `Duration`, with support for additional units: `w` (week), `M` (month), `q` (quarter), and `y` (year).
  optional string fixed_interval = 9;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  optional string offset = 10;

  // The time zone identifier.
  optional string time_zone = 11;
}
message CompositeGeoTileGridAggregationSource {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  optional bool missing_bucket = 2;

  optional MissingOrder missing_order = 3;

  optional Script script = 4;

  optional ValueType value_type = 5;

  optional SortOrder order = 6;

  optional int32 precision = 7;

  optional GeoBounds bounds = 8;
}
message CompositeHistogramAggregationSource {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  optional bool missing_bucket = 2;

  optional MissingOrder missing_order = 3;

  optional Script script = 4;

  optional ValueType value_type = 5;

  optional SortOrder order = 6;

  double interval = 7;
}
message CompositeTermsAggregationSource {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  optional bool missing_bucket = 2;

  optional MissingOrder missing_order = 3;

  optional Script script = 4;

  optional ValueType value_type = 5;

  optional SortOrder order = 6;
}
message CompositeValuesSource {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  optional bool missing_bucket = 2;

  optional MissingOrder missing_order = 3;

  optional Script script = 4;

  optional ValueType value_type = 5;

  optional SortOrder order = 6;
}
message ConstantScoreQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  QueryContainer filter = 3;
}
message Context {
  oneof context {
    string category = 1;

    GeoLocation location = 2;
  }
}
message ContextArray {
  repeated Context context_array = 1;
}
message CoordsGeoBounds {
  // The top boundary latitude.
  double top = 1;

  // The bottom boundary latitude.
  double bottom = 2;

  // The left boundary longitude.
  double left = 3;

  // The right boundary longitude.
  double right = 4;
}
message CumulativeCardinalityAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 value = 2;

  optional string value_as_string = 3;
}
message CumulativeCardinalityAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message CumulativeSumAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message CustomAnalyzer {
  CustomAnalyzerType type = 1;

  repeated string char_filter = 2;

  repeated string filter = 3;

  optional int32 position_increment_gap = 4;

  optional int32 position_offset_gap = 5;

  string tokenizer = 6;
}
enum CustomAnalyzerType {
  CUSTOM_ANALYZER_TYPE_UNSPECIFIED = 0;
  CUSTOM_ANALYZER_TYPE_CUSTOM = 1;
}
message DateDecayPlacement {
  optional double decay = 1;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  optional string offset = 2;

  optional string origin = 3;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  string scale = 4;
}
message DateHistogramAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseDateHistogramBucketAllOfBuckets buckets = 2;
}
message DateHistogramAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional CalendarInterval calendar_interval = 5;

  optional ExtendedBoundsFieldDateMath extended_bounds = 6;

  optional ExtendedBoundsFieldDateMath hard_bounds = 7;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 8;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  optional string fixed_interval = 9;

  // The date format used to format `key_as_string` in the response. If no `format` is specified, the first date format specified in the field mapping is used.
  optional string format = 10;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  optional string interval = 11;

  // Only returns buckets that have `min_doc_count` number of documents. By default, all buckets between the first bucket that matches documents and the last one are returned.
  optional int32 min_doc_count = 12;

  optional string missing = 13;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  optional string offset = 14;

  optional HistogramOrder order = 15;

  optional ObjectMap params = 16;

  optional Script script = 17;

  // The time zone identifier.
  optional string time_zone = 18;

  // Set to `true` to associate a unique string key with each bucket and return the ranges as a hash rather than an array.
  optional bool keyed = 19;
}
message DateHistogramBucket {
  int64 doc_count = 1;

  optional string key_as_string = 2;

  // The time unit for milliseconds.
  int64 key = 3;
}
message DateRangeAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseRangeBucketAllOfBuckets buckets = 2;
}
message DateRangeAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 5;

  // The date format used to format `from` and `to` in the response.
  optional string format = 6;

  optional FieldValue missing = 7;

  // Array of date ranges.
  repeated DateRangeExpression ranges = 8;

  // The time zone identifier.
  optional string time_zone = 9;

  // Set to `true` to associate a unique string key with each bucket and returns the ranges as a hash rather than an array.
  optional bool keyed = 10;
}
message DateRangeExpression {
  optional FieldDateMath from = 1;

  // Custom key to return the range with.
  optional string key = 2;

  optional FieldDateMath to = 3;
}
message DateRangeQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional RangeRelation relation = 3;

  optional string gt = 4;

  optional string gte = 5;

  optional string lt = 6;

  optional string lte = 7;

  optional DateRangeQueryAllOfFrom from = 8;

  optional DateRangeQueryAllOfTo to = 9;

  // The date format pattern.
  optional string format = 10;

  // The time zone identifier.
  optional string time_zone = 11;

  // Include the lower bound
  optional bool include_lower = 12;

  // Include the upper bound
  optional bool include_upper = 13;

  string field = 14;
}
message DateRangeQueryAllOfFrom {
  oneof date_range_query_all_of_from {
    string string = 1;

    NullValue null_value = 2;
  }
}
message DateRangeQueryAllOfTo {
  oneof date_range_query_all_of_to {
    string string = 1;

    NullValue null_value = 2;
  }
}
message DateTime {
  oneof date_time {
    string string = 1;

    // The time unit for milliseconds.
    int64 int64 = 2;
  }
}
enum Day {
  DAY_UNSPECIFIED = 0;
  DAY_DAY = 1;
  DAY__1D = 2;
}
message DecayFunction {
  optional MultiValueMode multi_value_mode = 1;

  map<string, DecayPlacement> placement = 2;
}
message DecayFunctionBase {
  optional MultiValueMode multi_value_mode = 1;
}
message DecayPlacement {
  oneof decay_placement {
    DateDecayPlacement date_decay_placement = 1;

    GeoDecayPlacement geo_decay_placement = 2;

    NumericDecayPlacement numeric_decay_placement = 3;
  }
}
message DeleteOperation {
  // The routing value for the document.
  optional string routing = 1;

  // The unique identifier for a resource.
  optional string x_id = 2;

  optional string x_index = 3;

  optional int64 if_primary_term = 4;

  // The sequence number of the document.
  optional int64 if_seq_no = 5;

  optional int64 version = 6;

  optional VersionType version_type = 7;
}
message DerivativeAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;

  optional double normalized_value = 4;

  optional string normalized_value_as_string = 5;
}
message DerivativeAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message DirectGenerator {
  string field = 1;

  optional int32 max_edits = 2;

  optional float max_inspections = 3;

  optional float max_term_freq = 4;

  optional float min_doc_freq = 5;

  optional int32 min_word_length = 6;

  optional string post_filter = 7;

  optional string pre_filter = 8;

  optional int32 prefix_length = 9;

  optional int32 size = 10;

  optional SuggestMode suggest_mode = 11;
}
message DisMaxQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // One or more query clauses. Returned documents must match one or more of these queries. If a document matches multiple queries, OpenSearch uses the highest relevance score.
  repeated QueryContainer queries = 3;

  // Floating point number between 0 and 1.0 used to increase the relevance scores of documents matching multiple query clauses.
  optional float tie_breaker = 4;
}
message DistanceFeatureQuery {
  oneof distance_feature_query {
    DistanceFeatureQueryOneOf distance_feature_query_one_of = 1;

    DistanceFeatureQueryOneOf1 distance_feature_query_one_of1 = 2;
  }
}
message DistanceFeatureQueryOneOf {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  GeoLocation origin = 3;

  string pivot = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 5;
}
message DistanceFeatureQueryOneOf1 {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  string origin = 3;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  string pivot = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 5;
}
enum DistanceUnit {
  DISTANCE_UNIT_UNSPECIFIED = 0;
  DISTANCE_UNIT_CM = 1;
  DISTANCE_UNIT_FT = 2;
  DISTANCE_UNIT_IN = 3;
  DISTANCE_UNIT_KM = 4;
  DISTANCE_UNIT_M = 5;
  DISTANCE_UNIT_MI = 6;
  DISTANCE_UNIT_MM = 7;
  DISTANCE_UNIT_NMI = 8;
  DISTANCE_UNIT_YD = 9;
}
message DiversifiedSamplerAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional SamplerAggregationExecutionHint execution_hint = 5;

  // Limits how many documents are permitted per choice of de-duplicating value.
  optional int32 max_docs_per_value = 6;

  optional Script script = 7;

  // Limits how many top-scoring documents are collected in the sample processed on each shard.
  optional int32 shard_size = 8;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 9;
}
message DoubleArray {
  // The location specified as an array of `[longitude, latitude]`.
  repeated double double_array = 1;
}
message DoubleTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseDoubleTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message DoubleTermsBucket {
  int64 doc_count = 1;

  optional int64 doc_count_error = 2;

  double key = 3;

  optional string key_as_string = 4;
}
message DutchAnalyzer {
  DutchAnalyzerType type = 1;

  repeated string stopwords = 2;
}
enum DutchAnalyzerType {
  DUTCH_ANALYZER_TYPE_UNSPECIFIED = 0;
  DUTCH_ANALYZER_TYPE_DUTCH = 1;
}
message ErrorCause {
  // The type of error.
  string type = 1;

  // A human-readable explanation of the error, in English.
  optional string reason = 2;

  // The server stack trace, present only if the `error_trace=true` parameter was sent with the request.
  optional string stack_trace = 3;

  optional ErrorCause caused_by = 4;

  repeated ErrorCause root_cause = 5;

  repeated ErrorCause suppressed = 6;
}
message ErrorResponseBase {
  ErrorCause error = 1;

  // The HTTP status code.
  int32 status = 2;
}
message EwmaModelSettings {
  optional float alpha = 1;
}
message EwmaMovingAverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional bool minimize = 6;

  optional int32 predict = 7;

  optional int32 window = 8;

  EwmaMovingAverageAggregationAllOfModel model = 9;

  EwmaModelSettings settings = 10;
}
enum EwmaMovingAverageAggregationAllOfModel {
  EWMA_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_UNSPECIFIED = 0;
  EWMA_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_EWMA = 1;
}
message ExistsQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 3;
}
enum ExpandWildcard {
  EXPAND_WILDCARD_UNSPECIFIED = 0;
  EXPAND_WILDCARD_ALL = 1;
  EXPAND_WILDCARD_CLOSED = 2;
  EXPAND_WILDCARD_HIDDEN = 3;
  EXPAND_WILDCARD_NONE = 4;
  EXPAND_WILDCARD_OPEN = 5;
}
message Explanation {
  string description = 1;

  repeated Explanation details = 2;

  ExplanationValue value = 3;
}
message ExplanationValue {
  optional int32 int32 = 1;

  optional int64 int64 = 2;

  optional float float = 3;

  optional double double = 4;
}
message ExtendedBounds {
  ObjectMap max = 1;

  ObjectMap min = 2;
}
message ExtendedBoundsDouble {
  double max = 1;

  double min = 2;
}
message ExtendedBoundsFieldDateMath {
  FieldDateMath max = 1;

  FieldDateMath min = 2;
}
message ExtendedStatsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  StatsAggregateBaseAllOfMin min = 3;

  StatsAggregateBaseAllOfMax max = 4;

  StatsAggregateBaseAllOfAvg avg = 5;

  double sum = 6;

  optional string min_as_string = 7;

  optional string max_as_string = 8;

  optional string avg_as_string = 9;

  optional string sum_as_string = 10;

  ExtendedStatsAggregateBaseAllOfSumOfSquares sum_of_squares = 11;

  ExtendedStatsAggregateBaseAllOfVariance variance = 12;

  ExtendedStatsAggregateBaseAllOfVariancePopulation variance_population = 13;

  ExtendedStatsAggregateBaseAllOfVarianceSampling variance_sampling = 14;

  ExtendedStatsAggregateBaseAllOfStdDeviation std_deviation = 15;

  ExtendedStatsAggregateBaseAllOfStdDeviationPopulation std_deviation_population = 16;

  ExtendedStatsAggregateBaseAllOfStdDeviationSampling std_deviation_sampling = 17;

  optional StandardDeviationBounds std_deviation_bounds = 18;

  optional string sum_of_squares_as_string = 19;

  optional string variance_as_string = 20;

  optional string variance_population_as_string = 21;

  optional string variance_sampling_as_string = 22;

  optional string std_deviation_as_string = 23;

  optional StandardDeviationBoundsAsString std_deviation_bounds_as_string = 24;
}
message ExtendedStatsAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  StatsAggregateBaseAllOfMin min = 3;

  StatsAggregateBaseAllOfMax max = 4;

  StatsAggregateBaseAllOfAvg avg = 5;

  double sum = 6;

  optional string min_as_string = 7;

  optional string max_as_string = 8;

  optional string avg_as_string = 9;

  optional string sum_as_string = 10;

  ExtendedStatsAggregateBaseAllOfSumOfSquares sum_of_squares = 11;

  ExtendedStatsAggregateBaseAllOfVariance variance = 12;

  ExtendedStatsAggregateBaseAllOfVariancePopulation variance_population = 13;

  ExtendedStatsAggregateBaseAllOfVarianceSampling variance_sampling = 14;

  ExtendedStatsAggregateBaseAllOfStdDeviation std_deviation = 15;

  ExtendedStatsAggregateBaseAllOfStdDeviationPopulation std_deviation_population = 16;

  ExtendedStatsAggregateBaseAllOfStdDeviationSampling std_deviation_sampling = 17;

  optional StandardDeviationBounds std_deviation_bounds = 18;

  optional string sum_of_squares_as_string = 19;

  optional string variance_as_string = 20;

  optional string variance_population_as_string = 21;

  optional string variance_sampling_as_string = 22;

  optional string std_deviation_as_string = 23;

  optional StandardDeviationBoundsAsString std_deviation_bounds_as_string = 24;
}
message ExtendedStatsAggregateBaseAllOfStdDeviation {
  oneof extended_stats_aggregate_base_all_of_std_deviation {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregateBaseAllOfStdDeviationPopulation {
  oneof extended_stats_aggregate_base_all_of_std_deviation_population {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregateBaseAllOfStdDeviationSampling {
  oneof extended_stats_aggregate_base_all_of_std_deviation_sampling {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregateBaseAllOfSumOfSquares {
  oneof extended_stats_aggregate_base_all_of_sum_of_squares {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregateBaseAllOfVariance {
  oneof extended_stats_aggregate_base_all_of_variance {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregateBaseAllOfVariancePopulation {
  oneof extended_stats_aggregate_base_all_of_variance_population {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregateBaseAllOfVarianceSampling {
  oneof extended_stats_aggregate_base_all_of_variance_sampling {
    double double = 1;

    NullValue null_value = 2;
  }
}
message ExtendedStatsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;

  // The number of standard deviations above/below the mean to display.
  optional double sigma = 7;
}
message ExtendedStatsBucketAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  StatsAggregateBaseAllOfMin min = 3;

  StatsAggregateBaseAllOfMax max = 4;

  StatsAggregateBaseAllOfAvg avg = 5;

  double sum = 6;

  optional string min_as_string = 7;

  optional string max_as_string = 8;

  optional string avg_as_string = 9;

  optional string sum_as_string = 10;

  ExtendedStatsAggregateBaseAllOfSumOfSquares sum_of_squares = 11;

  ExtendedStatsAggregateBaseAllOfVariance variance = 12;

  ExtendedStatsAggregateBaseAllOfVariancePopulation variance_population = 13;

  ExtendedStatsAggregateBaseAllOfVarianceSampling variance_sampling = 14;

  ExtendedStatsAggregateBaseAllOfStdDeviation std_deviation = 15;

  ExtendedStatsAggregateBaseAllOfStdDeviationPopulation std_deviation_population = 16;

  ExtendedStatsAggregateBaseAllOfStdDeviationSampling std_deviation_sampling = 17;

  optional StandardDeviationBounds std_deviation_bounds = 18;

  optional string sum_of_squares_as_string = 19;

  optional string variance_as_string = 20;

  optional string variance_population_as_string = 21;

  optional string variance_sampling_as_string = 22;

  optional string std_deviation_as_string = 23;

  optional StandardDeviationBoundsAsString std_deviation_bounds_as_string = 24;
}
message ExtendedStatsBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  // The number of standard deviations above/below the mean to display.
  optional double sigma = 6;
}
message FetchProfile {
  string type = 1;

  string description = 2;

  // Time unit for nanoseconds.
  int64 time_in_nanos = 3;

  FetchProfileBreakdown breakdown = 4;

  optional FetchProfileDebug debug = 5;

  repeated FetchProfile children = 6;
}
message FetchProfileBreakdown {
  optional int32 load_source = 1;

  optional int32 load_source_count = 2;

  optional int32 load_stored_fields = 3;

  optional int32 load_stored_fields_count = 4;

  optional int32 next_reader = 5;

  optional int32 next_reader_count = 6;

  optional int32 process_count = 7;

  optional int32 process = 8;
}
message FetchProfileDebug {
  repeated string stored_fields = 1;

  optional int32 fast_path = 2;
}
message FieldAndFormat {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 1;

  // Format in which the values are returned.
  optional string format = 2;

  optional bool include_unmapped = 3;
}
message FieldCollapse {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 1;

  // The number of inner hits and their sort order.
  repeated InnerHits inner_hits = 2;

  // The number of concurrent requests that are allowed to be retrieved by the `inner_hits` parameter per group.
  optional int32 max_concurrent_group_searches = 3;
}
message FieldDateMath {
  oneof field_date_math {
    string expr = 1;

    double value = 2;
  }
}
message FieldLookup {
  // The unique identifier for a resource.
  string id = 1;

  optional string index = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string path = 3;

  // The routing value for the document.
  optional string routing = 4;
}
message FieldSort {
  // The value to use when the field is missing.
  optional FieldValue missing = 1;

  // The mode for sorting on array fields.
  optional SortMode mode = 2;

  // The nested path sort options.
  optional NestedSortValue nested = 3;

  // The sort order direction.
  optional SortOrder order = 4;

  // The type to use for unmapped fields.
  optional FieldType unmapped_type = 5;

  // The numeric type to use for sorting.
  optional FieldSortNumericType numeric_type = 6;

  // The format to use for the sort values.
  optional string format = 7;
}
message FieldSortMap {
  map<string, FieldSort> field_sort_map = 1;
}
enum FieldSortNumericType {
  FIELD_SORT_NUMERIC_TYPE_UNSPECIFIED = 0;
  FIELD_SORT_NUMERIC_TYPE_DATE = 1;
  FIELD_SORT_NUMERIC_TYPE_DATE_NANOS = 2;
  FIELD_SORT_NUMERIC_TYPE_DOUBLE = 3;
  FIELD_SORT_NUMERIC_TYPE_LONG = 4;
}
message FieldSuggester {
  optional string prefix = 1;

  optional string regex = 2;

  optional string text = 3;

  optional CompletionSuggester completion = 4;

  optional PhraseSuggester phrase = 5;

  optional TermSuggester term = 6;
}
enum FieldType {
  FIELD_TYPE_UNSPECIFIED = 0;
  FIELD_TYPE_AGGREGATE_METRIC_DOUBLE = 1;
  FIELD_TYPE_ALIAS = 2;
  FIELD_TYPE_BINARY = 3;
  FIELD_TYPE_BOOLEAN = 4;
  FIELD_TYPE_BYTE = 5;
  FIELD_TYPE_COMPLETION = 6;
  FIELD_TYPE_CONSTANT_KEYWORD = 7;
  FIELD_TYPE_DATE = 8;
  FIELD_TYPE_DATE_NANOS = 9;
  FIELD_TYPE_DATE_RANGE = 10;
  FIELD_TYPE_DOUBLE = 11;
  FIELD_TYPE_DOUBLE_RANGE = 12;
  FIELD_TYPE_FLAT_OBJECT = 13;
  FIELD_TYPE_FLOAT = 14;
  FIELD_TYPE_FLOAT_RANGE = 15;
  FIELD_TYPE_GEO_POINT = 16;
  FIELD_TYPE_GEO_SHAPE = 17;
  FIELD_TYPE_HALF_FLOAT = 18;
  FIELD_TYPE_HISTOGRAM = 19;
  FIELD_TYPE_ICU_COLLATION_KEYWORD = 20;
  FIELD_TYPE_INTEGER = 21;
  FIELD_TYPE_INTEGER_RANGE = 22;
  FIELD_TYPE_IP = 23;
  FIELD_TYPE_IP_RANGE = 24;
  FIELD_TYPE_JOIN = 25;
  FIELD_TYPE_KEYWORD = 26;
  FIELD_TYPE_KNN_VECTOR = 27;
  FIELD_TYPE_LONG = 28;
  FIELD_TYPE_LONG_RANGE = 29;
  FIELD_TYPE_MATCH_ONLY_TEXT = 30;
  FIELD_TYPE_MURMUR3 = 31;
  FIELD_TYPE_NESTED = 32;
  FIELD_TYPE_OBJECT = 33;
  FIELD_TYPE_PERCOLATOR = 34;
  FIELD_TYPE_RANK_FEATURE = 35;
  FIELD_TYPE_RANK_FEATURES = 36;
  FIELD_TYPE_SCALED_FLOAT = 37;
  FIELD_TYPE_SEARCH_AS_YOU_TYPE = 38;
  FIELD_TYPE_SHORT = 39;
  FIELD_TYPE_TEXT = 40;
  FIELD_TYPE_TOKEN_COUNT = 41;
  FIELD_TYPE_UNSIGNED_LONG = 42;
  FIELD_TYPE_VERSION = 43;
  FIELD_TYPE_WILDCARD = 44;
  FIELD_TYPE_XY_POINT = 45;
  FIELD_TYPE_XY_SHAPE = 46;
}
message FieldValue {
  optional bool bool = 1;

  optional GeneralNumber general_number = 2;

  optional string string = 3;
}
message FieldValueArray {
  repeated FieldValue field_value_array = 1;
}
enum FieldValueFactorModifier {
  FIELD_VALUE_FACTOR_MODIFIER_UNSPECIFIED = 0;
  FIELD_VALUE_FACTOR_MODIFIER_LN = 1;
  FIELD_VALUE_FACTOR_MODIFIER_LN1P = 2;
  FIELD_VALUE_FACTOR_MODIFIER_LN2P = 3;
  FIELD_VALUE_FACTOR_MODIFIER_LOG = 4;
  FIELD_VALUE_FACTOR_MODIFIER_LOG1P = 5;
  FIELD_VALUE_FACTOR_MODIFIER_LOG2P = 6;
  FIELD_VALUE_FACTOR_MODIFIER_NONE = 7;
  FIELD_VALUE_FACTOR_MODIFIER_RECIPROCAL = 8;
  FIELD_VALUE_FACTOR_MODIFIER_SQRT = 9;
  FIELD_VALUE_FACTOR_MODIFIER_SQUARE = 10;
}
message FieldValueFactorScoreFunction {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 1;

  // Optional factor to multiply the field value with.
  optional float factor = 2;

  // Value used if the document doesn't have that field. The modifier and factor are still applied to it as though it were read from the document.
  optional double missing = 3;

  optional FieldValueFactorModifier modifier = 4;
}
message FilterAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message FiltersAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseFiltersBucketAllOfBuckets buckets = 2;
}
message FiltersAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional BucketsQueryContainer filters = 5;

  // Set to `true` to add a bucket to the response which will contain all documents that do not match any of the given filters.
  optional bool other_bucket = 6;

  // The key with which the other bucket is returned.
  optional string other_bucket_key = 7;

  // By default, the named filters aggregation returns the buckets as an object. Set to `false` to return the buckets as an array of objects.
  optional bool keyed = 8;
}
message FiltersBucket {
  int64 doc_count = 1;
}
message FingerprintAnalyzer {
  FingerprintAnalyzerType type = 1;

  optional string version = 2;

  int32 max_output_size = 3;

  bool preserve_original = 4;

  string separator = 5;

  repeated string stopwords = 6;

  optional string stopwords_path = 7;
}
enum FingerprintAnalyzerType {
  FINGERPRINT_ANALYZER_TYPE_UNSPECIFIED = 0;
  FINGERPRINT_ANALYZER_TYPE_FINGERPRINT = 1;
}
message FloatMap {
  map<string, float> float_map = 1;
}
message FormatMetricAggregationBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
message FormattableMetricAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
enum FunctionBoostMode {
  FUNCTION_BOOST_MODE_UNSPECIFIED = 0;
  FUNCTION_BOOST_MODE_AVG = 1;
  FUNCTION_BOOST_MODE_MAX = 2;
  FUNCTION_BOOST_MODE_MIN = 3;
  FUNCTION_BOOST_MODE_MULTIPLY = 4;
  FUNCTION_BOOST_MODE_REPLACE = 5;
  FUNCTION_BOOST_MODE_SUM = 6;
}
message FunctionScoreContainer {
  optional QueryContainer filter = 1;

  optional float weight = 2;

  optional DecayFunction exp = 3;

  optional DecayFunction gauss = 4;

  optional DecayFunction linear = 5;

  optional FieldValueFactorScoreFunction field_value_factor = 6;

  optional RandomScoreFunction random_score = 7;

  optional ScriptScoreFunction script_score = 8;
}
enum FunctionScoreMode {
  FUNCTION_SCORE_MODE_UNSPECIFIED = 0;
  FUNCTION_SCORE_MODE_AVG = 1;
  FUNCTION_SCORE_MODE_FIRST = 2;
  FUNCTION_SCORE_MODE_MAX = 3;
  FUNCTION_SCORE_MODE_MIN = 4;
  FUNCTION_SCORE_MODE_MULTIPLY = 5;
  FUNCTION_SCORE_MODE_SUM = 6;
}
message FunctionScoreQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional FunctionBoostMode boost_mode = 3;

  // One or more functions that compute a new score for each document returned by the query.
  repeated FunctionScoreContainer functions = 4;

  // Restricts the new score to not exceed the provided limit.
  optional float max_boost = 5;

  // Excludes documents that do not meet the provided score threshold.
  optional float min_score = 6;

  optional QueryContainer query = 7;

  optional FunctionScoreMode score_mode = 8;
}
message Fuzziness {
  oneof fuzziness {
    // The fuzziness value as `AUTO`, or a string edit distance.
    string string = 1;

    // The fuzziness value as a numeric edit distance.
    int32 int32 = 2;
  }
}
message FuzzyQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Maximum number of variations created.
  optional int32 max_expansions = 3;

  // Number of beginning characters left unchanged when creating expansions.
  optional int32 prefix_length = 4;

  optional MultiTermQueryRewrite rewrite = 5;

  // Indicates whether edits include transpositions of two adjacent characters (for example, `ab` to `ba`).
  optional bool transpositions = 6;

  optional Fuzziness fuzziness = 7;

  // Term you wish to find in the provided field.
  FieldValue value = 8;

  string field = 9;
}
enum GapPolicy {
  GAP_POLICY_UNSPECIFIED = 0;
  GAP_POLICY_INSERT_ZEROS = 1;
  GAP_POLICY_KEEP_VALUES = 2;
  GAP_POLICY_SKIP = 3;
}
message GeoBoundingBoxQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional GeoExecution type = 3;

  optional GeoValidationMethod validation_method = 4;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 5;

  map<string, GeoBounds> bounding_box = 6;
}
message GeoBounds {
  oneof geo_bounds {
    // The bounds specified using coordinate values.
    CoordsGeoBounds coords = 1;

    // The bounds specified using upper-left and lower-right points.
    TopLeftBottomRightGeoBounds tlbr = 2;

    // The bounds specified using upper-right and lower-left points.
    TopRightBottomLeftGeoBounds trbl = 3;

    // The bounds specified using WKT format.
    WktGeoBounds wkt = 4;
  }
}
message GeoBoundsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional GeoBounds bounds = 2;
}
message GeoBoundsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  // Specifies whether the bounding box should be allowed to overlap the international date line.
  optional bool wrap_longitude = 6;
}
message GeoCentroidAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  optional GeoLocation location = 3;
}
message GeoCentroidAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional int64 count = 6;

  optional GeoLocation location = 7;
}
message GeoDecayPlacement {
  optional double decay = 1;

  optional string offset = 2;

  GeoLocation origin = 3;

  string scale = 4;
}
message GeoDistanceAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseRangeBucketAllOfBuckets buckets = 2;
}
message GeoDistanceAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional GeoDistanceType distance_type = 5;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 6;

  optional GeoLocation origin = 7;

  // An array of ranges used to bucket documents.
  repeated AggregationRange ranges = 8;

  optional DistanceUnit unit = 9;
}
message GeoDistanceQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  string distance = 3;

  optional GeoDistanceType distance_type = 4;

  optional GeoValidationMethod validation_method = 5;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 6;

  // The unit of distance measurement.
  optional DistanceUnit unit = 7;

  map<string, GeoLocation> location = 8;
}
message GeoDistanceSort {
  // The mode for sorting on array or multi-valued fields.
  optional SortMode mode = 1;

  // The algorithm to use for distance calculation.
  optional GeoDistanceType distance_type = 2;

  // Whether to ignore unmapped fields and not sort based on them.
  optional bool ignore_unmapped = 3;

  optional NestedSortValue nested = 4;

  // The direction of the sort order.
  optional SortOrder order = 5;

  // The unit of distance measurement.
  optional DistanceUnit unit = 6;

  optional GeoValidationMethod validation_method = 7;
}
enum GeoDistanceType {
  GEO_DISTANCE_TYPE_UNSPECIFIED = 0;
  GEO_DISTANCE_TYPE_ARC = 1;
  GEO_DISTANCE_TYPE_PLANE = 2;
}
enum GeoExecution {
  GEO_EXECUTION_UNSPECIFIED = 0;
  GEO_EXECUTION_INDEXED = 1;
  GEO_EXECUTION_MEMORY = 2;
}
message GeoHashGridAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseGeoHashGridBucketAllOfBuckets buckets = 2;
}
message GeoHashGridAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional GeoBounds bounds = 5;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 6;

  optional GeoHashPrecision precision = 7;

  // Allows for more accurate counting of the top cells returned in the final result the aggregation. Defaults to returning `max(10,(size x number-of-shards))` buckets from each shard.
  optional int32 shard_size = 8;

  // The maximum number of geohash buckets to return.
  optional int32 size = 9;
}
message GeoHashGridBucket {
  int64 doc_count = 1;

  // The geohash string representation of a geographical location.
  string key = 2;
}
message GeoHashLocation {
  // The geohash string representation of a geographical location.
  string geohash = 1;
}
message GeoHashPrecision {
  oneof geo_hash_precision {
    // The geohash precision as a geohash length.
    int32 geohash_length = 1;

    // The geohash precision as a distance measure.
    string distance = 2;
  }
}
message GeoLocation {
  oneof geo_location {
    // The location specified using latitude and longitude coordinates.
    LatLonGeoLocation latlon = 1;

    // The location specified using a geohash value.
    GeoHashLocation geohash = 2;

    DoubleArray double_array = 3;

    // The location specified as a string in `lat,lon` or WKT format.
    string text = 4;
  }
}
message GeoLocationArray {
  // The geo points to use for distance calculation.
  repeated GeoLocation geo_location_array = 1;
}
message GeoPolygonPoints {
  repeated GeoLocation points = 1;
}
message GeoPolygonQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional GeoValidationMethod validation_method = 3;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 4;

  map<string, GeoPolygonPoints> polygon = 5;
}
message GeoShape {
  optional string type = 1;

  repeated ObjectMap coordinates = 2;
}
message GeoShapeQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 3;

  map<string, GeoShapeQueryField> shape = 4;
}
message GeoShapeQueryField {
  optional FieldLookup indexed_shape = 1;

  GeoShape shape = 2;

  optional GeoShapeRelation relation = 3;
}
enum GeoShapeRelation {
  GEO_SHAPE_RELATION_UNSPECIFIED = 0;
  GEO_SHAPE_RELATION_CONTAINS = 1;
  GEO_SHAPE_RELATION_DISJOINT = 2;
  GEO_SHAPE_RELATION_INTERSECTS = 3;
  GEO_SHAPE_RELATION_WITHIN = 4;
}
message GeoTileGridAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseGeoTileGridBucketAllOfBuckets buckets = 2;
}
message GeoTileGridAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 5;

  // The precision level for geo tile calculations.
  optional GeneralNumber precision = 6;

  // Allows for more accurate counting of the top cells returned in the final result the aggregation. Defaults to returning `max(10,(size x number-of-shards))` buckets from each shard.
  optional int32 shard_size = 7;

  // The maximum number of buckets to return.
  optional int32 size = 8;

  optional GeoBounds bounds = 9;
}
message GeoTileGridBucket {
  int64 doc_count = 1;

  // A map tile reference, represented as `{zoom}/{x}/{y}`.
  string key = 2;
}
enum GeoValidationMethod {
  GEO_VALIDATION_METHOD_UNSPECIFIED = 0;
  GEO_VALIDATION_METHOD_COERCE = 1;
  GEO_VALIDATION_METHOD_IGNORE_MALFORMED = 2;
  GEO_VALIDATION_METHOD_STRICT = 3;
}
message GlobalAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message GlobalAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;
}
message GoogleNormalizedDistanceHeuristic {
  // Set to `false` if you defined a custom background filter that represents a different set of documents that you want to compare to.
  optional bool background_is_superset = 1;
}
message HasChildQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 3;

  optional InnerHits inner_hits = 4;

  // Maximum number of child documents that match the query allowed for a returned parent document. If the parent document exceeds this limit, it is excluded from the search results.
  optional int32 max_children = 5;

  // Minimum number of child documents that match the query required to match the query for a returned parent document. If the parent document does not meet this limit, it is excluded from the search results.
  optional int32 min_children = 6;

  QueryContainer query = 7;

  optional ChildScoreMode score_mode = 8;

  // The name of a relation in a join field.
  string type = 9;
}
message HasParentQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 3;

  optional InnerHits inner_hits = 4;

  // The name of a relation in a join field.
  string parent_type = 5;

  QueryContainer query = 6;

  // Indicates whether the relevance score of a matching parent document is aggregated into its child documents.
  optional bool score = 7;
}
message HdrMethod {
  // Specifies the resolution of values for the histogram in number of significant digits.
  optional int32 number_of_significant_value_digits = 1;
}
message HdrPercentileRanksAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  Percentiles values = 2;
}
message HdrPercentilesAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  Percentiles values = 2;
}
message Highlight {
  optional HighlighterType type = 1;

  // A string that contains each boundary character.
  optional string boundary_chars = 2;

  // How far to scan for boundary characters.
  optional int32 boundary_max_scan = 3;

  optional BoundaryScanner boundary_scanner = 4;

  // Controls which locale is used to search for sentence and word boundaries. This parameter takes the form of a language tag, for example, `\"en-US\"`, `\"fr-FR\"`, or `\"ja-JP\"`.
  optional string boundary_scanner_locale = 5;

  optional bool force_source = 6;

  optional HighlighterFragmenter fragmenter = 7;

  optional int32 fragment_offset = 8;

  // The size of the highlighted fragment in characters.
  optional int32 fragment_size = 9;

  optional bool highlight_filter = 10;

  optional QueryContainer highlight_query = 11;

  optional int32 max_fragment_length = 12;

  // If set to a non-negative value, highlighting stops at this defined maximum limit. The rest of the text is not processed or highlighted, and no error is returned. The `max_analyzer_offset` query setting does not override the `index.highlight.max_analyzed_offset` setting, which takes precedence when it is set to a lower value than the query setting.
  optional int32 max_analyzer_offset = 13;

  // The amount of text you want to return from the beginning of the field if there are no matching fragments to highlight.
  optional int32 no_match_size = 14;

  // The maximum number of fragments to return. When the number of fragments is set to `0`, no fragments are returned. Instead, the entirety of a field's contents are highlighted and returned. This is useful when you need to highlight short texts, such as a title or address, in which fragmentation is not required. If `number_of_fragments` is set to `0`, the `fragment_size` is ignored.
  optional int32 number_of_fragments = 15;

  optional ObjectMap options = 16;

  optional HighlighterOrder order = 17;

  // Controls the number of matching phrases in a document that are considered. This prevents the `fvh` highlighter from analyzing too many phrases and consuming too much memory. When using `matched_fields`, phrase-limited phrases per matched field are considered. Raising the limit increases the query time and consumes more memory. This setting is only supported by the `fvh` highlighter.
  optional int32 phrase_limit = 18;

  // When used in conjunction with `pre_tags`, defines the HTML tags to use for the highlighted text. By default, highlighted text is wrapped in `<em>` and `</em>` tags.
  repeated string post_tags = 19;

  // When used in conjunction with `post_tags`, defines the HTML tags to use for the highlighted text. By default, highlighted text is wrapped in `<em>` and `</em>` tags.
  repeated string pre_tags = 20;

  // By default, only fields that contains a query match are highlighted. Set to `false` to highlight all fields.
  optional bool require_field_match = 21;

  optional HighlighterTagsSchema tags_schema = 22;

  optional HighlighterEncoder encoder = 23;

  map<string, HighlightField> fields = 24;
}
message HighlightBase {
  optional HighlighterType type = 1;

  // A string that contains each boundary character.
  optional string boundary_chars = 2;

  // How far to scan for boundary characters.
  optional int32 boundary_max_scan = 3;

  optional BoundaryScanner boundary_scanner = 4;

  // Controls which locale is used to search for sentence and word boundaries. This parameter takes the form of a language tag, for example, `\"en-US\"`, `\"fr-FR\"`, or `\"ja-JP\"`.
  optional string boundary_scanner_locale = 5;

  optional bool force_source = 6;

  optional HighlighterFragmenter fragmenter = 7;

  optional int32 fragment_offset = 8;

  // The size of the highlighted fragment in characters.
  optional int32 fragment_size = 9;

  optional bool highlight_filter = 10;

  optional QueryContainer highlight_query = 11;

  optional int32 max_fragment_length = 12;

  // If set to a non-negative value, highlighting stops at this defined maximum limit. The rest of the text is not processed or highlighted, and no error is returned. The `max_analyzer_offset` query setting does not override the `index.highlight.max_analyzed_offset` setting, which takes precedence when it is set to a lower value than the query setting.
  optional int32 max_analyzer_offset = 13;

  // The amount of text you want to return from the beginning of the field if there are no matching fragments to highlight.
  optional int32 no_match_size = 14;

  // The maximum number of fragments to return. When the number of fragments is set to `0`, no fragments are returned. Instead, the entirety of a field's contents are highlighted and returned. This is useful when you need to highlight short texts, such as a title or address, in which fragmentation is not required. If `number_of_fragments` is set to `0`, the `fragment_size` is ignored.
  optional int32 number_of_fragments = 15;

  optional ObjectMap options = 16;

  optional HighlighterOrder order = 17;

  // Controls the number of matching phrases in a document that are considered. This prevents the `fvh` highlighter from analyzing too many phrases and consuming too much memory. When using `matched_fields`, phrase-limited phrases per matched field are considered. Raising the limit increases the query time and consumes more memory. This setting is only supported by the `fvh` highlighter.
  optional int32 phrase_limit = 18;

  // When used in conjunction with `pre_tags`, defines the HTML tags to use for the highlighted text. By default, highlighted text is wrapped in `<em>` and `</em>` tags.
  repeated string post_tags = 19;

  // When used in conjunction with `post_tags`, defines the HTML tags to use for the highlighted text. By default, highlighted text is wrapped in `<em>` and `</em>` tags.
  repeated string pre_tags = 20;

  // By default, only fields that contains a query match are highlighted. Set to `false` to highlight all fields.
  optional bool require_field_match = 21;

  optional HighlighterTagsSchema tags_schema = 22;
}
message HighlightField {
  optional HighlighterType type = 1;

  // A string that contains each boundary character.
  optional string boundary_chars = 2;

  // How far to scan for boundary characters.
  optional int32 boundary_max_scan = 3;

  optional BoundaryScanner boundary_scanner = 4;

  // Controls which locale is used to search for sentence and word boundaries. This parameter takes the form of a language tag, for example, `\"en-US\"`, `\"fr-FR\"`, or `\"ja-JP\"`.
  optional string boundary_scanner_locale = 5;

  optional bool force_source = 6;

  optional HighlighterFragmenter fragmenter = 7;

  optional int32 fragment_offset = 8;

  // The size of the highlighted fragment in characters.
  optional int32 fragment_size = 9;

  optional bool highlight_filter = 10;

  optional QueryContainer highlight_query = 11;

  optional int32 max_fragment_length = 12;

  // If set to a non-negative value, highlighting stops at this defined maximum limit. The rest of the text is not processed or highlighted, and no error is returned. The `max_analyzer_offset` query setting does not override the `index.highlight.max_analyzed_offset` setting, which takes precedence when it is set to a lower value than the query setting.
  optional int32 max_analyzer_offset = 13;

  // The amount of text you want to return from the beginning of the field if there are no matching fragments to highlight.
  optional int32 no_match_size = 14;

  // The maximum number of fragments to return. When the number of fragments is set to `0`, no fragments are returned. Instead, the entirety of a field's contents are highlighted and returned. This is useful when you need to highlight short texts, such as a title or address, in which fragmentation is not required. If `number_of_fragments` is set to `0`, the `fragment_size` is ignored.
  optional int32 number_of_fragments = 15;

  optional ObjectMap options = 16;

  optional HighlighterOrder order = 17;

  // Controls the number of matching phrases in a document that are considered. This prevents the `fvh` highlighter from analyzing too many phrases and consuming too much memory. When using `matched_fields`, phrase-limited phrases per matched field are considered. Raising the limit increases the query time and consumes more memory. This setting is only supported by the `fvh` highlighter.
  optional int32 phrase_limit = 18;

  // When used in conjunction with `pre_tags`, defines the HTML tags to use for the highlighted text. By default, highlighted text is wrapped in `<em>` and `</em>` tags.
  repeated string post_tags = 19;

  // When used in conjunction with `post_tags`, defines the HTML tags to use for the highlighted text. By default, highlighted text is wrapped in `<em>` and `</em>` tags.
  repeated string pre_tags = 20;

  // By default, only fields that contains a query match are highlighted. Set to `false` to highlight all fields.
  optional bool require_field_match = 21;

  optional HighlighterTagsSchema tags_schema = 22;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string matched_fields = 23;

  optional Analyzer analyzer = 24;
}
enum HighlighterEncoder {
  HIGHLIGHTER_ENCODER_UNSPECIFIED = 0;
  HIGHLIGHTER_ENCODER_DEFAULT = 1;
  HIGHLIGHTER_ENCODER_HTML = 2;
}
enum HighlighterFragmenter {
  HIGHLIGHTER_FRAGMENTER_UNSPECIFIED = 0;
  HIGHLIGHTER_FRAGMENTER_SIMPLE = 1;
  HIGHLIGHTER_FRAGMENTER_SPAN = 2;
}
enum HighlighterOrder {
  HIGHLIGHTER_ORDER_UNSPECIFIED = 0;
  HIGHLIGHTER_ORDER_SCORE = 1;
}
enum HighlighterTagsSchema {
  HIGHLIGHTER_TAGS_SCHEMA_UNSPECIFIED = 0;
  HIGHLIGHTER_TAGS_SCHEMA_STYLED = 1;
}
message HighlighterType {
  oneof highlighter_type {
    BuiltinHighlighterType builtin = 1;

    string custom = 2;
  }
}
message HistogramAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseHistogramBucketAllOfBuckets buckets = 2;
}
message HistogramAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional ExtendedBoundsDouble extended_bounds = 5;

  optional ExtendedBoundsDouble hard_bounds = 6;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 7;

  // The interval for the buckets. Must be a positive decimal.
  optional double interval = 8;

  // Only returns buckets that have `min_doc_count` number of documents. By default, the response will fill gaps in the histogram with empty buckets.
  optional int32 min_doc_count = 9;

  // The value to apply to documents that do not have a value. By default, documents without a value are ignored.
  optional double missing = 10;

  // By default, the bucket keys start with 0 and then continue in even spaced steps of `interval`. The bucket boundaries can be shifted by using the `offset` option.
  optional double offset = 11;

  optional HistogramOrder order = 12;

  optional Script script = 13;

  optional string format = 14;

  // If `true`, returns buckets as a hash instead of an array, keyed by the bucket keys.
  optional bool keyed = 15;
}
message HistogramBucket {
  int64 doc_count = 1;

  double key = 2;

  optional string key_as_string = 3;
}
message HistogramOrder {
  optional SortOrder x_count = 1;

  optional SortOrder x_key = 2;
}
message Hit {
  optional ObjectMap fields = 1;

  map<string, StringArray> highlight = 2;

  map<string, InnerHitsResult> inner_hits = 3;

  repeated string matched_queries = 4;

  map<string, StringArray> ignored_field_values = 5;

  repeated FieldValue sort = 6;

  // The type of document or resource.
  optional string x_type = 7;

  optional string x_index = 8;

  // The unique identifier for a resource.
  optional string x_id = 9;

  optional HitXScore x_score = 10;

  optional Explanation x_explanation = 11;

  optional NestedIdentity x_nested = 12;

  repeated string x_ignored = 13;

  optional string x_shard = 14;

  optional string x_node = 15;

  optional string x_routing = 16;

  optional ObjectMap x_source = 17;

  // The sequence number of the document.
  optional int64 x_seq_no = 18;

  optional int64 x_primary_term = 19;

  optional int64 x_version = 20;
}
message HitXScore {
  oneof hit_x_score {
    NullValue null_value = 1;

    double double = 2;
  }
}
message HitsMetadata {
  optional HitsMetadataTotal total = 1;

  repeated HitsMetadataHitsInner hits = 2;

  optional HitsMetadataMaxScore max_score = 3;
}
message HitsMetadataHitsInner {
  optional ObjectMap fields = 1;

  map<string, StringArray> highlight = 2;

  map<string, InnerHitsResult> inner_hits = 3;

  repeated string matched_queries = 4;

  map<string, StringArray> ignored_field_values = 5;

  repeated FieldValue sort = 6;

  // The type of document or resource.
  optional string x_type = 7;

  optional string x_index = 8;

  // The unique identifier for a resource.
  optional string x_id = 9;

  optional HitXScore x_score = 10;

  optional Explanation x_explanation = 11;

  optional NestedIdentity x_nested = 12;

  repeated string x_ignored = 13;

  optional string x_shard = 14;

  optional string x_node = 15;

  optional string x_routing = 16;

  optional ObjectMap x_source = 17;

  // The sequence number of the document.
  optional int64 x_seq_no = 18;

  optional int64 x_primary_term = 19;

  optional int64 x_version = 20;
}
message HitsMetadataJsonValue {
  optional HitsMetadataTotal total = 1;

  repeated HitsMetadataJsonValueAllOfHits hits = 2;

  optional HitsMetadataMaxScore max_score = 3;
}
message HitsMetadataJsonValueAllOfHits {
  optional ObjectMap source = 1 [json_name = "_source"];
}
message HitsMetadataMaxScore {
  oneof hits_metadata_max_score {
    NullValue null_value = 1;

    float float = 2;
  }
}
message HitsMetadataTotal {
  oneof hits_metadata_total {
    TotalHits total_hits = 1;

    int64 int64 = 2;
  }
}
message HoltLinearModelSettings {
  optional float alpha = 1;

  optional float beta = 2;
}
message HoltMovingAverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional bool minimize = 6;

  optional int32 predict = 7;

  optional int32 window = 8;

  HoltMovingAverageAggregationAllOfModel model = 9;

  HoltLinearModelSettings settings = 10;
}
enum HoltMovingAverageAggregationAllOfModel {
  HOLT_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_UNSPECIFIED = 0;
  HOLT_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_HOLT = 1;
}
message HoltWintersModelSettings {
  optional float alpha = 1;

  optional float beta = 2;

  optional float gamma = 3;

  optional bool pad = 4;

  optional int32 period = 5;

  optional HoltWintersType type = 6;
}
message HoltWintersMovingAverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional bool minimize = 6;

  optional int32 predict = 7;

  optional int32 window = 8;

  HoltWintersMovingAverageAggregationAllOfModel model = 9;

  HoltWintersModelSettings settings = 10;
}
enum HoltWintersMovingAverageAggregationAllOfModel {
  HOLT_WINTERS_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_UNSPECIFIED = 0;
  HOLT_WINTERS_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_HOLT_WINTERS = 1;
}
enum HoltWintersType {
  HOLT_WINTERS_TYPE_UNSPECIFIED = 0;
  HOLT_WINTERS_TYPE_ADD = 1;
  HOLT_WINTERS_TYPE_MULT = 2;
}
enum Hour {
  HOUR_UNSPECIFIED = 0;
  HOUR_HOUR = 1;
  HOUR__1H = 2;
}
message HybridQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  repeated QueryContainer queries = 3;

  optional int32 pagination_depth = 4;
}
message IcuAnalyzer {
  IcuAnalyzerType type = 1;

  IcuNormalizationType method = 2;

  IcuNormalizationMode mode = 3;
}
enum IcuAnalyzerType {
  ICU_ANALYZER_TYPE_UNSPECIFIED = 0;
  ICU_ANALYZER_TYPE_ICU_ANALYZER = 1;
}
enum IcuNormalizationMode {
  ICU_NORMALIZATION_MODE_UNSPECIFIED = 0;
  ICU_NORMALIZATION_MODE_COMPOSE = 1;
  ICU_NORMALIZATION_MODE_DECOMPOSE = 2;
}
enum IcuNormalizationType {
  ICU_NORMALIZATION_TYPE_UNSPECIFIED = 0;
  ICU_NORMALIZATION_TYPE_NFC = 1;
  ICU_NORMALIZATION_TYPE_NFKC = 2;
  ICU_NORMALIZATION_TYPE_NFKC_CF = 3;
}
message IdsQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  repeated string values = 3;
}
message IndexOperation {
  // The routing value for the document.
  optional string routing = 1;

  // The unique identifier for a resource.
  optional string x_id = 2;

  optional string x_index = 3;

  // The pipeline ID for preprocessing documents. When the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. When a final pipeline is configured, that pipeline will always run, regardless of the value of this parameter.
  optional string pipeline = 4;

  // When `true`, require that all actions target an index alias rather than an index. Default is `false`.
  optional bool require_alias = 5;

  optional int64 if_primary_term = 6;

  // The sequence number of the document.
  optional int64 if_seq_no = 7;

  optional OpType op_type = 8;

  optional int64 version = 9;

  optional VersionType version_type = 10;
}
message InlineGetDictUserDefined {
  // The fields retrieved from the document.
  optional ObjectMap fields = 1;

  // Whether the document was found.
  bool found = 2;

  // The sequence number of the document.
  optional int64 x_seq_no = 3;

  // The primary term of the document.
  optional int64 x_primary_term = 4;

  // The routing value for the document.
  optional string x_routing = 5;

  // The source of the document.
  optional ObjectMap x_source = 6;
}
message InlineScript {
  // Specifies any named parameters that are passed into the script as variables.  Use parameters instead of hard-coded values to decrease compilation time.
  optional ObjectMap params = 1;

  optional ScriptLanguage lang = 2;

  map<string, string> options = 3;

  // The script source.
  string source = 4;
}
message InnerHits {
  // The name of a resource or configuration element.
  optional string name = 1;

  // The maximum number of hits to return per `inner_hits`.
  optional int32 size = 2;

  // The inner hit that initiates document offset.
  optional int32 from = 3;

  optional FieldCollapse collapse = 4;

  repeated FieldAndFormat docvalue_fields = 5;

  optional bool explain = 6;

  optional Highlight highlight = 7;

  optional bool ignore_unmapped = 8;

  map<string, ScriptField> script_fields = 9;

  optional bool seq_no_primary_term = 10;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string fields = 11;

  repeated SortCombinations sort = 12;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string stored_fields = 13;

  optional bool track_scores = 14;

  optional bool version = 15;

  optional SourceConfig x_source = 16;
}
message InnerHitsResult {
  HitsMetadata hits = 1;
}
message IntervalsAllOf {
  // An array of rules to combine. All rules must produce a match in a document for the overall source to match.
  repeated IntervalsContainer intervals = 1;

  // Maximum number of positions between the matching terms. Intervals produced by the rules further apart than this are not considered matches.
  optional int32 max_gaps = 2;

  // If `true`, intervals produced by the rules should appear in the order in which they are specified.
  optional bool ordered = 3;

  optional IntervalsFilter filter = 4;
}
message IntervalsAnyOf {
  // An array of rules to match.
  repeated IntervalsContainer intervals = 1;

  optional IntervalsFilter filter = 2;
}
message IntervalsContainer {
  optional IntervalsAllOf all_of = 1;

  optional IntervalsAnyOf any_of = 2;

  optional IntervalsFuzzy fuzzy = 3;

  optional IntervalsMatch match = 4;

  optional IntervalsPrefix prefix = 5;

  optional IntervalsWildcard wildcard = 6;
}
message IntervalsFilter {
  optional IntervalsContainer after = 1;

  optional IntervalsContainer before = 2;

  optional IntervalsContainer contained_by = 3;

  optional IntervalsContainer containing = 4;

  optional IntervalsContainer not_contained_by = 5;

  optional IntervalsContainer not_containing = 6;

  optional IntervalsContainer not_overlapping = 7;

  optional IntervalsContainer overlapping = 8;

  optional Script script = 9;
}
message IntervalsFuzzy {
  // Analyzer used to normalize the term.
  optional string analyzer = 1;

  optional Fuzziness fuzziness = 2;

  // Number of beginning characters left unchanged when creating expansions.
  optional int32 prefix_length = 3;

  // The term to match.
  string term = 4;

  // Indicates whether edits include transpositions of two adjacent characters (for example, `ab` to `ba`).
  optional bool transpositions = 5;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string use_field = 6;
}
message IntervalsMatch {
  // Analyzer used to analyze terms in the query.
  optional string analyzer = 1;

  // Maximum number of positions between the matching terms. Terms further apart than this are not considered matches.
  optional int32 max_gaps = 2;

  // If `true`, matching terms must appear in their specified order.
  optional bool ordered = 3;

  // Text you wish to find in the provided field.
  string query = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string use_field = 5;

  optional IntervalsFilter filter = 6;
}
message IntervalsPrefix {
  // Analyzer used to analyze the `prefix`.
  optional string analyzer = 1;

  // Beginning characters of terms you wish to find in the top-level field.
  string prefix = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string use_field = 3;
}
message IntervalsQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional IntervalsAllOf all_of = 3;

  optional IntervalsAnyOf any_of = 4;

  optional IntervalsFuzzy fuzzy = 5;

  optional IntervalsMatch match = 6;

  optional IntervalsPrefix prefix = 7;

  optional IntervalsWildcard wildcard = 8;

  string field = 9;
}
message IntervalsWildcard {
  // Analyzer used to analyze the `pattern`. Defaults to the top-level field's analyzer.
  optional string analyzer = 1;

  // Wildcard pattern used to find matching terms.
  string pattern = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string use_field = 3;
}
message IpRangeAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseIpRangeBucketAllOfBuckets buckets = 2;
}
message IpRangeAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 5;

  // Array of IP ranges.
  repeated IpRangeAggregationRange ranges = 6;
}
message IpRangeAggregationRange {
  // Start of the range.
  optional string from = 1;

  // IP range defined as a CIDR mask.
  optional string mask = 2;

  // End of the range.
  optional string to = 3;
}
message IpRangeBucket {
  int64 doc_count = 1;

  optional string key = 2;

  optional string from = 3;

  optional string to = 4;
}
message Items {
  optional ResponseItem index = 1;

  optional ResponseItem create = 2;

  optional ResponseItem update = 3;

  optional ResponseItem delete = 4;
}
message KeyedPercentilesValue {
  oneof keyed_percentiles_value {
    double double = 1;

    string string = 2;

    NullValue null_value = 3;
  }
}
message KeyedPercentilesValueMap {
  map<string, KeyedPercentilesValue> keyed_percentiles_value_map = 1;
}
message KeywordAnalyzer {
  KeywordAnalyzerType type = 1;

  optional string version = 2;
}
enum KeywordAnalyzerType {
  KEYWORD_ANALYZER_TYPE_UNSPECIFIED = 0;
  KEYWORD_ANALYZER_TYPE_KEYWORD = 1;
}
message KnnQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  repeated float vector = 3;

  // The total number of nearest neighbors to return as top hits.
  optional int32 k = 4;

  // The minimum similarity score required in order for a neighbor to be considered a hit.
  optional float min_score = 5;

  // The maximum physical vector space distance required in order for a neighbor to be considered a hit.
  optional float max_distance = 6;

  // The filter for the k-NN search query.
  optional QueryContainer filter = 7;

  optional ObjectMap method_parameters = 8;

  optional KnnQueryRescore rescore = 9;

  optional bool expand_nested_docs = 10;

  string field = 11;
}
message KnnQueryRescore {
  oneof knn_query_rescore {
    bool enable = 1;

    RescoreContext context = 2;
  }
}
message KuromojiAnalyzer {
  KuromojiAnalyzerType type = 1;

  KuromojiTokenizationMode mode = 2;

  optional string user_dictionary = 3;
}
enum KuromojiAnalyzerType {
  KUROMOJI_ANALYZER_TYPE_UNSPECIFIED = 0;
  KUROMOJI_ANALYZER_TYPE_KUROMOJI = 1;
}
enum KuromojiTokenizationMode {
  KUROMOJI_TOKENIZATION_MODE_UNSPECIFIED = 0;
  KUROMOJI_TOKENIZATION_MODE_EXTENDED = 1;
  KUROMOJI_TOKENIZATION_MODE_NORMAL = 2;
  KUROMOJI_TOKENIZATION_MODE_SEARCH = 3;
}
enum Language {
  LANGUAGE_UNSPECIFIED = 0;
  LANGUAGE_ARABIC = 1;
  LANGUAGE_ARMENIAN = 2;
  LANGUAGE_BASQUE = 3;
  LANGUAGE_BRAZILIAN = 4;
  LANGUAGE_BULGARIAN = 5;
  LANGUAGE_CATALAN = 6;
  LANGUAGE_CHINESE = 7;
  LANGUAGE_CJK = 8;
  LANGUAGE_CZECH = 9;
  LANGUAGE_DANISH = 10;
  LANGUAGE_DUTCH = 11;
  LANGUAGE_ENGLISH = 12;
  LANGUAGE_ESTONIAN = 13;
  LANGUAGE_FINNISH = 14;
  LANGUAGE_FRENCH = 15;
  LANGUAGE_GALICIAN = 16;
  LANGUAGE_GERMAN = 17;
  LANGUAGE_GREEK = 18;
  LANGUAGE_HINDI = 19;
  LANGUAGE_HUNGARIAN = 20;
  LANGUAGE_INDONESIAN = 21;
  LANGUAGE_IRISH = 22;
  LANGUAGE_ITALIAN = 23;
  LANGUAGE_LATVIAN = 24;
  LANGUAGE_NORWEGIAN = 25;
  LANGUAGE_PERSIAN = 26;
  LANGUAGE_PORTUGUESE = 27;
  LANGUAGE_ROMANIAN = 28;
  LANGUAGE_RUSSIAN = 29;
  LANGUAGE_SORANI = 30;
  LANGUAGE_SPANISH = 31;
  LANGUAGE_SWEDISH = 32;
  LANGUAGE_THAI = 33;
  LANGUAGE_TURKISH = 34;
}
message LanguageAnalyzer {
  LanguageAnalyzerType type = 1;

  optional string version = 2;

  Language language = 3;

  repeated string stem_exclusion = 4;

  repeated string stopwords = 5;

  optional string stopwords_path = 6;
}
enum LanguageAnalyzerType {
  LANGUAGE_ANALYZER_TYPE_UNSPECIFIED = 0;
  LANGUAGE_ANALYZER_TYPE_LANGUAGE = 1;
}
message LaplaceSmoothingModel {
  double alpha = 1;
}
message LatLonGeoLocation {
  // The latitude coordinate.
  double lat = 1;

  // The longitude coordinate.
  double lon = 2;
}
message Like {
  oneof like {
    string text = 1;

    LikeDocument document = 2;
  }
}
message LikeDocument {
  optional ObjectMap doc = 1;

  repeated string fields = 2;

  map<string, string> per_field_analyzer = 3;

  // The routing value for the document.
  optional string routing = 4;

  optional int64 version = 5;

  optional VersionType version_type = 6;

  // The unique identifier for a resource.
  optional string x_id = 7;

  optional string x_index = 8;

  // The type of document or resource.
  optional string x_type = 9;
}
message LinearInterpolationSmoothingModel {
  double bigram_lambda = 1;

  double trigram_lambda = 2;

  double unigram_lambda = 3;
}
message LinearMovingAverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional bool minimize = 6;

  optional int32 predict = 7;

  optional int32 window = 8;

  LinearMovingAverageAggregationAllOfModel model = 9;

  // An empty object with no properties.
  ObjectMap settings = 10;
}
enum LinearMovingAverageAggregationAllOfModel {
  LINEAR_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_UNSPECIFIED = 0;
  LINEAR_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_LINEAR = 1;
}
message LongRareTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseLongRareTermsBucketAllOfBuckets buckets = 2;
}
message LongRareTermsBucket {
  int64 doc_count = 1;

  int64 key = 2;

  optional string key_as_string = 3;
}
message LongTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseLongTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message LongTermsBucket {
  int64 doc_count = 1;

  optional int64 doc_count_error = 2;

  LongTermsBucketKey key = 3;

  optional string key_as_string = 4;
}
message LongTermsBucketKey {
  oneof long_terms_bucket_key {
    int64 signed = 1;

    string unsigned = 2;
  }
}
message MatchAllQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;
}
message MatchBoolPrefixQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Analyzer used to convert the text in the query value into tokens.
  optional string analyzer = 3;

  optional Fuzziness fuzziness = 4;

  optional MultiTermQueryRewrite fuzzy_rewrite = 5;

  // If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`). Can be applied to the term subqueries constructed for all terms but the final term.
  optional bool fuzzy_transpositions = 6;

  // Maximum number of terms to which the query will expand. Can be applied to the term subqueries constructed for all terms but the final term.
  optional int32 max_expansions = 7;

  optional MinimumShouldMatch minimum_should_match = 8;

  optional Operator operator = 9;

  // Number of beginning characters left unchanged for fuzzy matching. Can be applied to the term subqueries constructed for all terms but the final term.
  optional int32 prefix_length = 10;

  // Terms you wish to find in the provided field. The last term is used in a prefix query.
  string query = 11;

  string field = 12;
}
message MatchNoneQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;
}
message MatchPhrasePrefixQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Analyzer used to convert text in the query value into tokens.
  optional string analyzer = 3;

  // Maximum number of terms to which the last provided term of the query value will expand.
  optional int32 max_expansions = 4;

  // Text you wish to find in the provided field.
  string query = 5;

  // Maximum number of positions allowed between matching tokens.
  optional int32 slop = 6;

  optional ZeroTermsQuery zero_terms_query = 7;

  string field = 8;
}
message MatchPhraseQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Analyzer used to convert the text in the query value into tokens.
  optional string analyzer = 3;

  // Query terms that are analyzed and turned into a phrase query.
  string query = 4;

  // Maximum number of positions allowed between matching tokens.
  optional int32 slop = 5;

  optional ZeroTermsQuery zero_terms_query = 6;

  string field = 7;
}
message MatchQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Analyzer used to convert the text in the query value into tokens.
  optional string analyzer = 3;

  // If `true`, match phrase queries are automatically created for multi-term synonyms.
  optional bool auto_generate_synonyms_phrase_query = 4;

  optional float cutoff_frequency = 5;

  optional Fuzziness fuzziness = 6;

  optional MultiTermQueryRewrite fuzzy_rewrite = 7;

  // If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
  optional bool fuzzy_transpositions = 8;

  // If `true`, format-based errors, such as providing a text query value for a numeric field, are ignored.
  optional bool lenient = 9;

  // Maximum number of terms to which the query will expand.
  optional int32 max_expansions = 10;

  optional MinimumShouldMatch minimum_should_match = 11;

  optional Operator operator = 12;

  // Number of beginning characters left unchanged for fuzzy matching.
  optional int32 prefix_length = 13;

  // Text, number, Boolean value or date you wish to find in the provided field.
  FieldValue query = 14;

  optional ZeroTermsQuery zero_terms_query = 15;

  string field = 16;
}
message MatrixAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string fields = 3;

  // The value to apply to documents that do not have a value. By default, documents without a value are ignored.
  map<string, double> missing = 4;
}
message MatrixStatsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  repeated MatrixStatsFields fields = 3;
}
message MatrixStatsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string fields = 3;

  // The value to apply to documents that do not have a value. By default, documents without a value are ignored.
  map<string, double> missing = 4;

  optional SortMode mode = 5;
}
message MatrixStatsFields {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string name = 1;

  int64 count = 2;

  double mean = 3;

  double variance = 4;

  double skewness = 5;

  double kurtosis = 6;

  map<string, double> covariance = 7;

  map<string, double> correlation = 8;
}
message MaxAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message MaxAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
message MaxBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message MedianAbsoluteDeviationAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message MedianAbsoluteDeviationAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;

  // Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling control of memory usage and approximation error.
  optional double compression = 7;
}
message MetricAggregationBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;
}
message MinAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message MinAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
message MinBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
enum MinimumInterval {
  MINIMUM_INTERVAL_UNSPECIFIED = 0;
  MINIMUM_INTERVAL_DAY = 1;
  MINIMUM_INTERVAL_HOUR = 2;
  MINIMUM_INTERVAL_MINUTE = 3;
  MINIMUM_INTERVAL_MONTH = 4;
  MINIMUM_INTERVAL_SECOND = 5;
  MINIMUM_INTERVAL_YEAR = 6;
}
message MinimumShouldMatch {
  oneof minimum_should_match {
    int32 int32 = 1;

    string string = 2;
  }
}
enum Minute {
  MINUTE_UNSPECIFIED = 0;
  MINUTE_MINUTE = 1;
  MINUTE__1M = 2;
}
message MissingAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message MissingAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 5;

  optional FieldValue missing = 6;
}
enum MissingOrder {
  MISSING_ORDER_UNSPECIFIED = 0;
  MISSING_ORDER_DEFAULT = 1;
  MISSING_ORDER_FIRST = 2;
  MISSING_ORDER_LAST = 3;
}
enum Month {
  MONTH_UNSPECIFIED = 0;
  MONTH_MONTH = 1;
  MONTH__1M = 2;
}
message MoreLikeThisQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The analyzer that is used to analyze the free form text. Defaults to the analyzer associated with the first field in fields.
  optional string analyzer = 3;

  // Each term in the formed query could be further boosted by their tf-idf score. This sets the boost factor to use when using this feature. Defaults to deactivated (0).
  optional float boost_terms = 4;

  // Controls whether the query should fail (throw an exception) if any of the specified fields are not of the supported types (`text` or `keyword`).
  optional bool fail_on_unsupported_field = 5;

  // A list of fields to fetch and analyze the text from. Defaults to the `index.query.default_field` index setting, which has a default value of `*`.
  repeated string fields = 6;

  // Specifies whether the input documents should also be included in the search results returned.
  optional bool include = 7;

  // Specifies free form text and/or a single or multiple documents for which you want to find similar documents.
  repeated Like like = 8;

  // The maximum document frequency above which the terms are ignored from the input document.
  optional int32 max_doc_freq = 9;

  // The maximum number of query terms that can be selected.
  optional int32 max_query_terms = 10;

  // The maximum word length above which the terms are ignored. Defaults to unbounded (`0`).
  optional int32 max_word_length = 11;

  // The minimum document frequency below which the terms are ignored from the input document.
  optional int32 min_doc_freq = 12;

  optional MinimumShouldMatch minimum_should_match = 13;

  // The minimum term frequency below which the terms are ignored from the input document.
  optional int32 min_term_freq = 14;

  // The minimum word length below which the terms are ignored.
  optional int32 min_word_length = 15;

  // Overrides the default analyzer.
  map<string, string> per_field_analyzer = 16;

  // The routing value for the document.
  optional string routing = 17;

  repeated string stop_words = 18;

  // Used in combination with `like` to exclude documents that match a set of terms.
  repeated Like unlike = 19;

  optional int64 version = 20;

  optional VersionType version_type = 21;
}
message MovingAverageAggregation {
  oneof moving_average_aggregation {
    LinearMovingAverageAggregation linear_moving_average_aggregation = 1;

    SimpleMovingAverageAggregation simple_moving_average_aggregation = 2;

    EwmaMovingAverageAggregation ewma_moving_average_aggregation = 3;

    HoltMovingAverageAggregation holt_moving_average_aggregation = 4;

    HoltWintersMovingAverageAggregation holt_winters_moving_average_aggregation = 5;
  }
}
message MovingAverageAggregationBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional bool minimize = 6;

  optional int32 predict = 7;

  optional int32 window = 8;
}
message MovingFunctionAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  // The script that should be executed on each window of data.
  optional string script = 6;

  // By default, the window consists of the last n values excluding the current bucket. Increasing `shift` by 1, moves the starting window position by 1 to the right.
  optional int32 shift = 7;

  // The size of window to \"slide\" across the histogram.
  optional int32 window = 8;
}
message MovingPercentilesAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  // The size of window to \"slide\" across the histogram.
  optional int32 window = 6;

  // By default, the window consists of the last n values excluding the current bucket. Increasing `shift` by 1, moves the starting window position by 1 to the right.
  optional int32 shift = 7;

  optional bool keyed = 8;
}
message MultiBucketAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseAdjacencyMatrixBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseAdjacencyMatrixBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseAdjacencyMatrixBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, AdjacencyMatrixBucket> keyed = 3;
}
message MultiBucketAggregateBaseAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, ObjectMap> t_bucket = 3;
}
message MultiBucketAggregateBaseCompositeBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseCompositeBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseCompositeBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, CompositeBucket> composite_bucket = 3;
}
message MultiBucketAggregateBaseDateHistogramBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseDateHistogramBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseDateHistogramBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, DateHistogramBucket> date_histogram_bucket = 3;
}
message MultiBucketAggregateBaseFiltersBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseFiltersBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseFiltersBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, FiltersBucket> filters_bucket = 3;
}
message MultiBucketAggregateBaseGeoHashGridBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseGeoHashGridBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseGeoHashGridBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, GeoHashGridBucket> geo_hash_grid_bucket = 3;
}
message MultiBucketAggregateBaseGeoTileGridBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseGeoTileGridBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseGeoTileGridBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, GeoTileGridBucket> geo_tile_grid_bucket = 3;
}
message MultiBucketAggregateBaseHistogramBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseHistogramBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseHistogramBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, HistogramBucket> histogram_bucket = 3;
}
message MultiBucketAggregateBaseIpRangeBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseIpRangeBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseIpRangeBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, IpRangeBucket> ip_range_bucket = 3;
}
message MultiBucketAggregateBaseLongRareTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseLongRareTermsBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseLongRareTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, LongRareTermsBucket> long_rare_terms_bucket = 3;
}
message MultiBucketAggregateBaseRangeBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseRangeBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseRangeBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, RangeBucket> range_bucket = 3;
}
message MultiBucketAggregateBaseStringRareTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseStringRareTermsBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseStringRareTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, StringRareTermsBucket> string_rare_terms_bucket = 3;
}
message MultiBucketAggregateBaseVariableWidthHistogramBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseVariableWidthHistogramBucketAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseVariableWidthHistogramBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, VariableWidthHistogramBucket> variable_width_histogram_bucket = 3;
}
message MultiBucketAggregateBaseVoid {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseVoidAllOfBuckets buckets = 2;
}
message MultiBucketAggregateBaseVoidAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, ObjectMap> void = 3;
}
message MultiBucketBase {
  int64 doc_count = 1;
}
message MultiMatchQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Analyzer used to convert the text in the query value into tokens.
  optional string analyzer = 3;

  // If `true`, match phrase queries are automatically created for multi-term synonyms.
  optional bool auto_generate_synonyms_phrase_query = 4;

  optional float cutoff_frequency = 5;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string fields = 6;

  optional Fuzziness fuzziness = 7;

  optional MultiTermQueryRewrite fuzzy_rewrite = 8;

  // If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`). Can be applied to the term subqueries constructed for all terms but the final term.
  optional bool fuzzy_transpositions = 9;

  // If `true`, format-based errors, such as providing a text query value for a numeric field, are ignored.
  optional bool lenient = 10;

  // Maximum number of terms to which the query will expand.
  optional int32 max_expansions = 11;

  optional MinimumShouldMatch minimum_should_match = 12;

  optional Operator operator = 13;

  // Number of beginning characters left unchanged for fuzzy matching.
  optional int32 prefix_length = 14;

  // Text, number, Boolean value or date you wish to find in the provided field.
  string query = 15;

  // Maximum number of positions allowed between matching tokens.
  optional int32 slop = 16;

  // Determines how scores for each per-term blended query and scores across groups are combined.
  optional float tie_breaker = 17;

  optional TextQueryType type = 18;

  optional ZeroTermsQuery zero_terms_query = 19;
}
message MultiTermLookup {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 1;

  optional FieldValue missing = 2;
}
enum MultiTermQueryRewrite {
  MULTI_TERM_QUERY_REWRITE_UNSPECIFIED = 0;
  MULTI_TERM_QUERY_REWRITE_CONSTANT_SCORE = 1;
  MULTI_TERM_QUERY_REWRITE_CONSTANT_SCORE_BOOLEAN = 2;
  MULTI_TERM_QUERY_REWRITE_SCORING_BOOLEAN = 3;
  MULTI_TERM_QUERY_REWRITE_STRING = 4;
}
message MultiTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseMultiTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message MultiTermsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional TermsAggregationCollectMode collect_mode = 5;

  optional HistogramOrder order = 6;

  // The minimum number of documents in a bucket for it to be returned.
  optional int32 min_doc_count = 7;

  // The minimum number of documents in a bucket on each shard for it to be returned.
  optional int32 shard_min_doc_count = 8;

  // The number of candidate terms produced by each shard. By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
  optional int32 shard_size = 9;

  // Calculates the doc count error on per term basis.
  optional bool show_term_doc_count_error = 10;

  // The number of term buckets should be returned out of the overall terms list.
  optional int32 size = 11;

  // The field from which to generate sets of terms.
  repeated MultiTermLookup terms = 12;
}
message MultiTermsBucket {
  int64 doc_count = 1;

  repeated FieldValue key = 2;

  optional string key_as_string = 3;

  optional int64 doc_count_error_upper_bound = 4;
}
enum MultiValueMode {
  MULTI_VALUE_MODE_UNSPECIFIED = 0;
  MULTI_VALUE_MODE_AVG = 1;
  MULTI_VALUE_MODE_MAX = 2;
  MULTI_VALUE_MODE_MIN = 3;
  MULTI_VALUE_MODE_SUM = 4;
}
message MutualInformationHeuristic {
  // Set to `false` if you defined a custom background filter that represents a different set of documents that you want to compare to.
  optional bool background_is_superset = 1;

  // Set to `false` to filter out the terms that appear less often in the subset than in documents outside the subset.
  optional bool include_negatives = 2;
}
message NestedAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message NestedAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string path = 5;
}
message NestedIdentity {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 1;

  int32 offset = 2;

  optional NestedIdentity x_nested = 3;
}
message NestedQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 3;

  optional InnerHits inner_hits = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string path = 5;

  QueryContainer query = 6;

  optional ChildScoreMode score_mode = 7;
}
message NestedSortValue {
  // The filter to apply to nested objects.
  optional QueryContainer filter = 1;

  // The maximum number of children to consider for sorting.
  optional int32 max_children = 2;

  // How to sort hierarchical nested objects.
  optional NestedSortValue nested = 3;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string path = 4;
}
message NeuralQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional string query_text = 3;

  optional string query_image = 4;

  optional string model_id = 5;

  optional int32 k = 6;

  optional float min_score = 7;

  optional float max_distance = 8;

  optional QueryContainer filter = 9;

  string field = 10;
}
message NoriAnalyzer {
  NoriAnalyzerType type = 1;

  optional string version = 2;

  optional NoriDecompoundMode decompound_mode = 3;

  repeated string stoptags = 4;

  optional string user_dictionary = 5;
}
enum NoriAnalyzerType {
  NORI_ANALYZER_TYPE_UNSPECIFIED = 0;
  NORI_ANALYZER_TYPE_NORI = 1;
}
enum NoriDecompoundMode {
  NORI_DECOMPOUND_MODE_UNSPECIFIED = 0;
  NORI_DECOMPOUND_MODE_DISCARD = 1;
  NORI_DECOMPOUND_MODE_MIXED = 2;
  NORI_DECOMPOUND_MODE_NONE = 3;
}
message NormalizeAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional NormalizeMethod method = 6;
}
enum NormalizeMethod {
  NORMALIZE_METHOD_UNSPECIFIED = 0;
  NORMALIZE_METHOD_MEAN = 1;
  NORMALIZE_METHOD_PERCENT_OF_SUM = 2;
  NORMALIZE_METHOD_RESCALE_0_1 = 3;
  NORMALIZE_METHOD_RESCALE_0_100 = 4;
  NORMALIZE_METHOD_SOFTMAX = 5;
  NORMALIZE_METHOD_Z_SCORE = 6;
}
message NullArray {
  repeated ObjectMap null_array = 1;
}
message NullMap {
  map<string, ObjectMap> null_map = 1;
}
message NumberRangeQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional RangeRelation relation = 3;

  // Greater than.
  optional double gt = 4;

  // Greater than or equal to.
  optional double gte = 5;

  // Less than.
  optional double lt = 6;

  // Less than or equal to.
  optional double lte = 7;

  optional NumberRangeQueryAllOfFrom from = 8;

  optional NumberRangeQueryAllOfTo to = 9;

  // Include the lower bound
  optional bool include_lower = 10;

  // Include the upper bound
  optional bool include_upper = 11;

  string field = 12;
}
message NumberRangeQueryAllOfFrom {
  oneof number_range_query_all_of_from {
    double double = 1;

    string string = 2;

    NullValue null_value = 3;
  }
}
message NumberRangeQueryAllOfTo {
  oneof number_range_query_all_of_to {
    double double = 1;

    string string = 2;

    NullValue null_value = 3;
  }
}
message NumericDecayPlacement {
  optional double decay = 1;

  optional double offset = 2;

  double origin = 3;

  double scale = 4;
}
enum OpType {
  OP_TYPE_UNSPECIFIED = 0;
  OP_TYPE_CREATE = 1;
  OP_TYPE_INDEX = 2;
}
message OperationBase {
  // The routing value for the document.
  optional string routing = 1;

  // The unique identifier for a resource.
  optional string x_id = 2;

  optional string x_index = 3;
}
message OperationContainer {
  optional IndexOperation index = 1;

  optional WriteOperation create = 2;

  optional UpdateOperation update = 3;

  optional DeleteOperation delete = 4;
}
enum Operator {
  OPERATOR_UNSPECIFIED = 0;
  OPERATOR_AND = 1;
  OPERATOR_OR = 2;
}
message ParentAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message ParentAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The name of a relation in a join field.
  optional string type = 5;
}
message ParentIdQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The unique identifier for a resource.
  optional string id = 3;

  // Set to `true` to ignore an unmapped field and not match any documents for this query. Set to `false` to throw an exception if the field is not mapped.
  optional bool ignore_unmapped = 4;

  // The name of a relation in a join field.
  optional string type = 5;
}
message PatternAnalyzer {
  PatternAnalyzerType type = 1;

  optional string version = 2;

  optional string flags = 3;

  optional bool lowercase = 4;

  string pattern = 5;

  repeated string stopwords = 6;
}
enum PatternAnalyzerType {
  PATTERN_ANALYZER_TYPE_UNSPECIFIED = 0;
  PATTERN_ANALYZER_TYPE_PATTERN = 1;
}
message PercentileRanksAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;

  // By default, the aggregation associates a unique string key with each bucket and returns the ranges as a hash rather than an array. Set to `false` to disable this behavior.
  optional bool keyed = 7;

  // An array of values for which to calculate the percentile ranks.
  repeated double values = 8;

  optional HdrMethod hdr = 9;

  optional TDigest tdigest = 10;
}
message Percentiles {
  oneof percentiles {
    KeyedPercentilesValueMap keyed = 1;

    ArrayPercentilesItemArray array_percentiles_item_array = 2;
  }
}
message PercentilesAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  Percentiles values = 2;
}
message PercentilesAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;

  // By default, the aggregation associates a unique string key with each bucket and returns the ranges as a hash rather than an array. Set to `false` to disable this behavior.
  optional bool keyed = 7;

  // The percentiles to calculate.
  repeated double percents = 8;

  optional HdrMethod hdr = 9;

  optional TDigest tdigest = 10;
}
message PercentilesBucketAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  Percentiles values = 2;
}
message PercentilesBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  // The list of percentiles to calculate.
  repeated double percents = 6;
}
message PercolateQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional ObjectMap document = 3;

  // An array of sources of the documents being percolated.
  repeated ObjectMap documents = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 5;

  // The unique identifier for a resource.
  optional string id = 6;

  optional string index = 7;

  // The suffix used for the `_percolator_document_slot` field when multiple `percolate` queries are specified.
  optional string name = 8;

  // Preference used to fetch document to percolate.
  optional string preference = 9;

  // The routing value for the document.
  optional string routing = 10;

  optional int64 version = 11;
}
message PhaseTook {
  // The time taken for the distributed frequency search `pre-query` phase.
  int64 dfs_pre_query = 1;

  // The time taken for the `query` phase.
  int64 query = 2;

  // The time taken for the `fetch` phase.
  int64 fetch = 3;

  // The time taken for the distributed frequency search query phase.
  int64 dfs_query = 4;

  // The time taken for the `expand` phase.
  int64 expand = 5;

  // The time taken for the `can_match` phase.
  int64 can_match = 6;
}
message PhoneAnalyzer {
  // Optional ISO 3166 country code, defaults to \"ZZ\" (unknown region).
  optional string phone_region = 1 [json_name = "phone-region"];

  PhoneAnalyzerAllOfType type = 2;
}
enum PhoneAnalyzerAllOfType {
  PHONE_ANALYZER_ALL_OF_TYPE_UNSPECIFIED = 0;
  PHONE_ANALYZER_ALL_OF_TYPE_PHONE = 1;
}
message PhoneAnalyzerBase {
  // Optional ISO 3166 country code, defaults to \"ZZ\" (unknown region).
  optional string phone_region = 1 [json_name = "phone-region"];
}
message PhoneSearchAnalyzer {
  // Optional ISO 3166 country code, defaults to \"ZZ\" (unknown region).
  optional string phone_region = 1 [json_name = "phone-region"];

  PhoneSearchAnalyzerAllOfType type = 2;
}
enum PhoneSearchAnalyzerAllOfType {
  PHONE_SEARCH_ANALYZER_ALL_OF_TYPE_UNSPECIFIED = 0;
  PHONE_SEARCH_ANALYZER_ALL_OF_TYPE_PHONE_SEARCH = 1;
}
message PhraseSuggest {
  int32 length = 1;

  int32 offset = 2;

  string text = 3;

  repeated PhraseSuggestOption options = 4;
}
message PhraseSuggestCollate {
  optional ObjectMap params = 1;

  optional bool prune = 2;

  PhraseSuggestCollateQuery query = 3;
}
message PhraseSuggestCollateQuery {
  optional string id = 1;

  optional string source = 2;
}
message PhraseSuggestHighlight {
  string post_tag = 1;

  string pre_tag = 2;
}
message PhraseSuggestOption {
  string text = 1;

  double score = 2;

  optional string highlighted = 3;

  optional bool collate_match = 4;
}
message PhraseSuggester {
  optional string analyzer = 1;

  string field = 2;

  optional int32 size = 3;

  optional PhraseSuggestCollate collate = 4;

  optional double confidence = 5;

  repeated DirectGenerator direct_generator = 6;

  optional bool force_unigrams = 7;

  optional int32 gram_size = 8;

  optional PhraseSuggestHighlight highlight = 9;

  optional double max_errors = 10;

  optional double real_word_error_likelihood = 11;

  optional string separator = 12;

  optional int32 shard_size = 13;

  optional SmoothingModel smoothing = 14;

  optional string text = 15;

  optional int32 token_limit = 16;
}
message PinnedDoc {
  // The unique identifier for a resource.
  string x_id = 1;

  string x_index = 2;
}
message PinnedQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  QueryContainer organic = 3;

  // Document IDs listed in the order they are to appear in results. Required if `docs` is not specified.
  repeated string ids = 4;

  // Documents listed in the order they are to appear in results. Required if `ids` is not specified.
  repeated PinnedDoc docs = 5;
}
message PipelineAggregationBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message PointInTimeReference {
  // The unique identifier for a resource.
  string id = 1;

  // A duration. Units can be `nanos`, `micros`, `ms` (milliseconds), `s` (seconds), `m` (minutes), `h` (hours) and `d` (days). Also accepts `0` without a unit and `-1` to indicate an unspecified value.
  optional string keep_alive = 2;
}
message PrefixQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional MultiTermQueryRewrite rewrite = 3;

  // Beginning characters of terms you wish to find in the provided field.
  string value = 4;

  // Allows ASCII case insensitive matching of the value with the indexed field values when set to `true`. Default is `false` which means the case sensitivity of matching depends on the underlying field's mapping.
  optional bool case_insensitive = 5;

  string field = 6;
}
message ProcessorExecutionDetail {
  optional string processor_name = 1;

  optional int64 duration_millis = 2;

  optional ObjectMap input_data = 3;

  optional ObjectMap output_data = 4;

  optional string status = 5;

  optional string tag = 6;

  optional string error = 7;
}
message Profile {
  repeated ShardProfile shards = 1;
}
enum Quarter {
  QUARTER_UNSPECIFIED = 0;
  QUARTER_QUARTER = 1;
  QUARTER__1Q = 2;
}
message QueryBase {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;
}
message QueryBreakdown {
  int64 advance = 1;

  int64 advance_count = 2;

  int64 build_scorer = 3;

  int64 build_scorer_count = 4;

  int64 create_weight = 5;

  int64 create_weight_count = 6;

  int64 match = 7;

  int64 match_count = 8;

  int64 shallow_advance = 9;

  int64 shallow_advance_count = 10;

  int64 next_doc = 11;

  int64 next_doc_count = 12;

  int64 score = 13;

  int64 score_count = 14;

  int64 compute_max_score = 15;

  int64 compute_max_score_count = 16;

  int64 set_min_competitive_score = 17;

  int64 set_min_competitive_score_count = 18;
}
message QueryContainer {
  optional BoolQuery bool = 1;

  optional BoostingQuery boosting = 2;

  optional CommonTermsQuery common = 3;

  optional CombinedFieldsQuery combined_fields = 4;

  optional ConstantScoreQuery constant_score = 5;

  optional DisMaxQuery dis_max = 6;

  optional DistanceFeatureQuery distance_feature = 7;

  optional ExistsQuery exists = 8;

  optional FunctionScoreQuery function_score = 9;

  // Returns documents that contain terms similar to the search term, as measured by a Levenshtein edit distance.
  optional FuzzyQuery fuzzy = 10;

  optional GeoBoundingBoxQuery geo_bounding_box = 11;

  optional GeoDistanceQuery geo_distance = 12;

  optional GeoPolygonQuery geo_polygon = 13;

  optional GeoShapeQuery geo_shape = 14;

  optional HasChildQuery has_child = 15;

  optional HasParentQuery has_parent = 16;

  optional HybridQuery hybrid = 17;

  optional IdsQuery ids = 18;

  // Returns documents based on the order and proximity of matching terms.
  optional IntervalsQuery intervals = 19;

  optional KnnQuery knn = 20;

  // Returns documents that match a provided text, number, date or Boolean value. The provided text is analyzed before matching.
  optional MatchQuery match = 21;

  optional MatchAllQuery match_all = 22;

  // Analyzes its input and constructs a `bool` query from the terms. Each term except the last is used in a `term` query. The last term is used in a prefix query.
  optional MatchBoolPrefixQuery match_bool_prefix = 23;

  optional MatchNoneQuery match_none = 24;

  // Analyzes the text and creates a phrase query out of the analyzed text.
  optional MatchPhraseQuery match_phrase = 25;

  // Returns documents that contain the words of a provided text, in the same order as provided. The last term of the provided text is treated as a prefix, matching any words that begin with that term.
  optional MatchPhrasePrefixQuery match_phrase_prefix = 26;

  optional MoreLikeThisQuery more_like_this = 27;

  optional MultiMatchQuery multi_match = 28;

  optional NestedQuery nested = 29;

  optional NeuralQuery neural = 30;

  optional ParentIdQuery parent_id = 31;

  optional PercolateQuery percolate = 32;

  optional PinnedQuery pinned = 33;

  // Returns documents that contain a specific prefix in a provided field.
  optional PrefixQuery prefix = 34;

  optional QueryStringQuery query_string = 35;

  // Returns documents that contain terms within a provided range.
  optional RangeQuery range = 36;

  optional RankFeatureQuery rank_feature = 37;

  // Returns documents that contain terms matching a regular expression.
  optional RegexpQuery regexp = 38;

  optional ScriptQuery script = 39;

  optional ScriptScoreQuery script_score = 40;

  optional SimpleQueryStringQuery simple_query_string = 41;

  optional SpanContainingQuery span_containing = 42;

  optional SpanFieldMaskingQuery field_masking_span = 43;

  optional SpanFirstQuery span_first = 44;

  optional SpanMultiTermQuery span_multi = 45;

  optional SpanNearQuery span_near = 46;

  optional SpanNotQuery span_not = 47;

  optional SpanOrQuery span_or = 48;

  // Matches spans containing a term.
  optional SpanTermQuery span_term = 49;

  optional SpanWithinQuery span_within = 50;

  // Return documents using a template query contains placeholders that are resolved by search request processors during query execution.
  optional ObjectMap template = 51;

  // Returns documents that contain an exact term in a provided field. To return a document, the query term must exactly match the queried field's value, including white space and capitalization.
  optional TermQuery term = 52;

  // Returns documents that contain one or more exact terms in a provided field.
  optional TermsQuery terms = 53;

  // Returns documents that contain a minimum number of exact terms in a provided field. To return a document, a required number of terms must exactly match the field values, including white space and capitalization.
  optional TermsSetQuery terms_set = 54;

  optional TypeQuery type = 55;

  // Returns documents that contain terms matching a wildcard pattern.
  optional WildcardQuery wildcard = 56;

  optional WrapperQuery wrapper = 57;

  optional XyShapeQuery xy_shape = 58;
}
message QueryProfile {
  QueryBreakdown breakdown = 1;

  string description = 2;

  // Time unit for nanoseconds.
  int64 time_in_nanos = 3;

  string type = 4;

  repeated QueryProfile children = 5;
}
message QueryStringQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // If `true`, the wildcard characters `*` and `?` are allowed as the first character of the query string.
  optional bool allow_leading_wildcard = 3;

  // Analyzer used to convert text in the query string into tokens.
  optional string analyzer = 4;

  // If `true`, the query attempts to analyze wildcard terms in the query string.
  optional bool analyze_wildcard = 5;

  // If `true`, match phrase queries are automatically created for multi-term synonyms.
  optional bool auto_generate_synonyms_phrase_query = 6;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string default_field = 7;

  optional Operator default_operator = 8;

  // If `true`, enable position increments in queries constructed from a `query_string` search.
  optional bool enable_position_increments = 9;

  optional bool escape = 10;

  // Array of fields to search. Supports wildcards (`*`).
  repeated string fields = 11;

  optional Fuzziness fuzziness = 12;

  // Maximum number of terms to which the query expands for fuzzy matching.
  optional int32 fuzzy_max_expansions = 13;

  // Number of beginning characters left unchanged for fuzzy matching.
  optional int32 fuzzy_prefix_length = 14;

  optional MultiTermQueryRewrite fuzzy_rewrite = 15;

  // If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
  optional bool fuzzy_transpositions = 16;

  // If `true`, format-based errors, such as providing a text value for a numeric field, are ignored.
  optional bool lenient = 17;

  // Maximum number of automaton states required for the query.
  optional int32 max_determinized_states = 18;

  optional MinimumShouldMatch minimum_should_match = 19;

  // Maximum number of positions allowed between matching tokens for phrases.
  optional int32 phrase_slop = 20;

  // Query string you wish to parse and use for search.
  string query = 21;

  // Analyzer used to convert quoted text in the query string into tokens. For quoted text, this parameter overrides the analyzer specified in the `analyzer` parameter.
  optional string quote_analyzer = 22;

  // Suffix appended to quoted text in the query string. You can use this suffix to use a different analysis method for exact matches.
  optional string quote_field_suffix = 23;

  optional MultiTermQueryRewrite rewrite = 24;

  // How to combine the queries generated from the individual search terms in the resulting `dis_max` query.
  optional float tie_breaker = 25;

  // The time zone identifier.
  optional string time_zone = 26;

  optional TextQueryType type = 27;
}
message RandomScoreFunction {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  optional RandomScoreFunctionSeed seed = 2;
}
message RandomScoreFunctionSeed {
  oneof random_score_function_seed {
    int32 int32 = 1;

    int64 int64 = 2;

    string string = 3;
  }
}
message RangeAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseRangeBucketAllOfBuckets buckets = 2;
}
message RangeAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseRangeBucketAllOfBuckets buckets = 2;
}
message RangeAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 5;

  // The value to apply to documents that do not have a value. By default, documents without a value are ignored.
  optional int32 missing = 6;

  // An array of ranges used to bucket documents.
  repeated AggregationRange ranges = 7;

  optional Script script = 8;

  // Set to `true` to associate a unique string key with each bucket and return the ranges as a hash rather than an array.
  optional bool keyed = 9;

  optional string format = 10;
}
message RangeBucket {
  int64 doc_count = 1;

  optional double from = 2;

  optional double to = 3;

  optional string from_as_string = 4;

  optional string to_as_string = 5;

  // The bucket key. Present if the aggregation is not keyed.
  optional string key = 6;
}
message RangeQuery {
  oneof range_query {
    NumberRangeQuery number_range_query = 1;

    DateRangeQuery date_range_query = 2;
  }
}
message RangeQueryBase {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional RangeRelation relation = 3;
}
enum RangeRelation {
  RANGE_RELATION_UNSPECIFIED = 0;
  RANGE_RELATION_CONTAINS = 1;
  RANGE_RELATION_INTERSECTS = 2;
  RANGE_RELATION_WITHIN = 3;
}
message RankFeatureFunctionLinear {}
message RankFeatureFunctionLogarithm {
  // Configurable scaling factor.
  float scaling_factor = 1;
}
message RankFeatureFunctionSaturation {
  // Configurable pivot value so that the result will be less than 0.5.
  optional float pivot = 1;
}
message RankFeatureFunctionSigmoid {
  // Configurable pivot value so that the result will be less than 0.5.
  float pivot = 1;

  // Configurable Exponent.
  float exponent = 2;
}
message RankFeatureQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 3;

  optional RankFeatureFunctionSaturation saturation = 4;

  optional RankFeatureFunctionLogarithm log = 5;

  optional RankFeatureFunctionLinear linear = 6;

  optional RankFeatureFunctionSigmoid sigmoid = 7;
}
message RareTermsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  repeated string exclude = 5;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 6;

  optional TermsInclude include = 7;

  // The maximum number of documents a term should appear in.
  optional int64 max_doc_count = 8;

  optional FieldValue missing = 9;

  // The precision of the internal CuckooFilters. Smaller precision leads to better approximation, but higher memory usage.
  optional double precision = 10;

  optional string value_type = 11;
}
message RateAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  double value = 2;

  optional string value_as_string = 3;
}
message RateAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;

  optional CalendarInterval unit = 7;

  optional RateMode mode = 8;
}
enum RateMode {
  RATE_MODE_UNSPECIFIED = 0;
  RATE_MODE_SUM = 1;
  RATE_MODE_VALUE_COUNT = 2;
}
enum Refresh {
  REFRESH_UNSPECIFIED = 0;
  REFRESH_BOOLEAN = 1;
  REFRESH_FALSE = 2;
  REFRESH_TRUE = 3;
  REFRESH_WAIT_FOR = 4;
}
message RegexpQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Allows case insensitive matching of the regular expression value with the indexed field values when set to `true`. When `false`, case sensitivity of matching depends on the underlying field's mapping.
  optional bool case_insensitive = 3;

  // Enables optional operators for the regular expression.
  optional string flags = 4;

  // Maximum number of automaton states required for the query.
  optional int32 max_determinized_states = 5;

  optional MultiTermQueryRewrite rewrite = 6;

  // Regular expression for terms you wish to find in the provided field.
  string value = 7;

  string field = 8;
}
message Rescore {
  RescoreQuery query = 1;

  optional int32 window_size = 2;
}
message RescoreContext {
  optional float oversample_factor = 1;
}
message RescoreQuery {
  QueryContainer rescore_query = 1;

  // The relative importance of the original query as compared to the rescore query.
  optional float query_weight = 2;

  // The relative importance of the rescore query as compared to the original query.
  optional float rescore_query_weight = 3;

  optional ScoreMode score_mode = 4;
}
message ResponseItem {
  // HTTP status code returned for the operation.
  int32 status = 1;

  optional ErrorCause error = 2;

  // Result of the operation. Successful values are `created`, `deleted`, and `updated`.
  optional string result = 3;

  optional bool forced_refresh = 4;

  optional InlineGetDictUserDefined get = 5;

  // The document type.
  optional string x_type = 6;

  // The document ID associated with the operation.
  optional string x_id = 7;

  // The name of the index associated with the operation. If the operation targets a data stream, this is the backing index into which the document was written.
  string x_index = 8;

  // The primary term assigned to the document for the operation.
  optional int64 x_primary_term = 9;

  // The sequence number of the document.
  optional int64 x_seq_no = 10;

  optional ShardInfo x_shards = 11;

  optional int64 x_version = 12;
}
message ReverseNestedAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message ReverseNestedAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string path = 5;
}
message SamplerAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message SamplerAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  // Limits how many top-scoring documents are collected in the sample processed on each shard.
  optional int32 shard_size = 5;
}
enum SamplerAggregationExecutionHint {
  SAMPLER_AGGREGATION_EXECUTION_HINT_UNSPECIFIED = 0;
  SAMPLER_AGGREGATION_EXECUTION_HINT_BYTES_HASH = 1;
  SAMPLER_AGGREGATION_EXECUTION_HINT_GLOBAL_ORDINALS = 2;
  SAMPLER_AGGREGATION_EXECUTION_HINT_MAP = 3;
}
enum ScoreMode {
  SCORE_MODE_UNSPECIFIED = 0;
  SCORE_MODE_AVG = 1;
  SCORE_MODE_MAX = 2;
  SCORE_MODE_MIN = 3;
  SCORE_MODE_MULTIPLY = 4;
  SCORE_MODE_TOTAL = 5;
}
message ScoreSort {
  optional SortOrder order = 1;
}
message Script {
  oneof script {
    InlineScript inline = 1;

    StoredScriptId stored = 2;
  }
}
message ScriptBase {
  // Specifies any named parameters that are passed into the script as variables.  Use parameters instead of hard-coded values to decrease compilation time.
  optional ObjectMap params = 1;
}
message ScriptField {
  // The script to execute for this field.
  Script script = 1;

  // Whether to ignore failures during script execution.
  optional bool ignore_failure = 2;
}
message ScriptLanguage {
  oneof script_language {
    BuiltinScriptLanguage builtin = 1;

    string custom = 2;
  }
}
message ScriptQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  Script script = 3;
}
message ScriptScoreFunction {
  Script script = 1;
}
message ScriptScoreQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Documents with a score lower than this floating point number are excluded from the search results.
  optional float min_score = 3;

  QueryContainer query = 4;

  Script script = 5;
}
message ScriptSort {
  optional SortOrder order = 1;

  // The script to use for sorting.
  Script script = 2;

  // The type of the script sort value.
  optional ScriptSortType type = 3;

  // The mode for sorting on array or multi-valued fields.
  optional SortMode mode = 4;

  // The nested path and filter for nested sorting.
  optional NestedSortValue nested = 5;
}
enum ScriptSortType {
  SCRIPT_SORT_TYPE_UNSPECIFIED = 0;
  SCRIPT_SORT_TYPE_NUMBER = 1;
  SCRIPT_SORT_TYPE_STRING = 2;
  SCRIPT_SORT_TYPE_VERSION = 3;
}
message ScriptedHeuristic {
  Script script = 1;
}
message ScriptedMetricAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  ObjectMap value = 2;
}
message ScriptedMetricAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional Script combine_script = 6;

  optional Script init_script = 7;

  optional Script map_script = 8;

  // A global object with script parameters for `init`, `map` and `combine` scripts. It is shared between the scripts.
  optional ObjectMap params = 9;

  optional Script reduce_script = 10;
}
message SearchProfile {
  repeated Collector collector = 1;

  repeated QueryProfile query = 2;

  int64 rewrite_time = 3;
}
message SearchRequest {
  // Defines the aggregations that are run as part of the search request.
  map<string, AggregationContainer> aggregations = 1;

  // Defines the aggregations that are run as part of the search request.
  map<string, AggregationContainer> aggs = 2;

  optional FieldCollapse collapse = 3;

  // If `true`, returns detailed information about score computation as part of a hit.
  optional bool explain = 4;

  // Configuration of search extensions defined by OpenSearch plugins.
  optional ObjectMap ext = 5;

  // Starting document offset. Needs to be non-negative. By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters. To page through more hits, use the `search_after` parameter.
  optional int32 from = 6;

  optional Highlight highlight = 7;

  optional TrackHits track_total_hits = 8;

  // Boosts the `_score` of documents from specified indexes.
  repeated FloatMap indices_boost = 9;

  // Array of wildcard (`*`) patterns. The request returns doc values for field names matching these patterns in the `hits.fields` property of the response.
  repeated FieldAndFormat docvalue_fields = 10;

  // Minimum `_score` for matching documents. Documents with a lower `_score` are not included in the search results.
  optional float min_score = 11;

  optional QueryContainer post_filter = 12;

  // Set to `true` to return detailed timing information about the execution of individual components in a search request. NOTE: This is a debugging tool and adds significant overhead to search execution.
  optional bool profile = 13;

  optional QueryContainer query = 14;

  // Can be used to improve precision by reordering just the top (for example 100 - 500) documents returned by the `query` and `post_filter` phases.
  repeated Rescore rescore = 15;

  // Retrieve a script evaluation (based on different fields) for each hit.
  map<string, ScriptField> script_fields = 16;

  repeated FieldValue search_after = 17;

  // The number of hits to return. By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters. To page through more hits, use the `search_after` parameter.
  optional int32 size = 18;

  optional SlicedScroll slice = 19;

  repeated SortCombinations sort = 20;

  // Array of wildcard (`*`) patterns. The request returns values for field names matching these patterns in the `hits.fields` property of the response.
  repeated FieldAndFormat fields = 21;

  optional Suggester suggest = 22;

  // Maximum number of documents to collect for each shard. If a query reaches this limit, OpenSearch terminates the query early. OpenSearch collects documents before sorting. Use with caution. OpenSearch applies this parameter to each shard handling the request. When possible, let OpenSearch perform early termination automatically. Avoid specifying this parameter for requests that target data streams with backing indexes across multiple data tiers. If set to `0` (default), the query does not terminate early.
  optional int32 terminate_after = 23;

  // Specifies the period of time to wait for a response from each shard. If no response is received before the timeout expires, the request fails and returns an error. Defaults to no timeout.
  optional string timeout = 24;

  // If `true`, calculate and return document scores, even if the scores are not used for sorting.
  optional bool track_scores = 25;

  // If `true`, returns document version as part of a hit.
  optional bool version = 26;

  // If `true`, returns sequence number and primary term of the last modification of each hit.
  optional bool seq_no_primary_term = 27;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string stored_fields = 28;

  optional PointInTimeReference pit = 29;

  // Stats groups to associate with the search. Each group maintains a statistics aggregation for its associated searches. You can retrieve these stats using the indexes stats API.
  repeated string stats = 30;

  optional SourceConfig x_source = 31;
}
message SearchResponse {
  int64 took = 1;

  bool timed_out = 2;

  optional PhaseTook phase_took = 3;

  HitsMetadata hits = 4;

  repeated ProcessorExecutionDetail processor_results = 5;

  map<string, Aggregate> aggregations = 6;

  optional ObjectMap fields = 7;

  optional int32 num_reduce_phases = 8;

  optional Profile profile = 9;

  // The unique identifier for a resource.
  optional string pit_id = 10;

  map<string, SuggestArray> suggest = 11;

  optional bool terminated_early = 12;

  ShardStatistics x_shards = 13;

  optional ClusterStatistics x_clusters = 14;

  optional string x_scroll_id = 15;
}
message SearchResult {
  int64 took = 1;

  bool timed_out = 2;

  optional PhaseTook phase_took = 3;

  HitsMetadata hits = 4;

  repeated ProcessorExecutionDetail processor_results = 5;

  map<string, Aggregate> aggregations = 6;

  optional ObjectMap fields = 7;

  optional int32 num_reduce_phases = 8;

  optional Profile profile = 9;

  // The unique identifier for a resource.
  optional string pit_id = 10;

  map<string, SuggestArray> suggest = 11;

  optional bool terminated_early = 12;

  ShardStatistics x_shards = 13;

  optional ClusterStatistics x_clusters = 14;

  optional string x_scroll_id = 15;
}
enum SearchType {
  SEARCH_TYPE_UNSPECIFIED = 0;
  SEARCH_TYPE_DFS_QUERY_THEN_FETCH = 1;
  SEARCH_TYPE_QUERY_THEN_FETCH = 2;
}
enum Second {
  SECOND_UNSPECIFIED = 0;
  SECOND_SECOND = 1;
  SECOND__1S = 2;
}
message SerialDifferencingAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  // The historical bucket to subtract from the current value. Must be a positive, non-zero integer.
  optional int32 lag = 6;
}
message ShardFailure {
  optional string index = 1;

  optional string node = 2;

  ErrorCause reason = 3;

  int32 shard = 4;

  optional string status = 5;
}
message ShardInfo {
  int32 failed = 1;

  int32 successful = 2;

  int32 total = 3;

  repeated ShardFailure failures = 4;
}
message ShardProfile {
  repeated AggregationProfile aggregations = 1;

  string id = 2;

  repeated SearchProfile searches = 3;

  optional FetchProfile fetch = 4;
}
message ShardStatistics {
  int32 failed = 1;

  int32 successful = 2;

  int32 total = 3;

  repeated ShardFailure failures = 4;

  optional int32 skipped = 5;
}
message SignificantLongTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SignificantTermsAggregateBaseSignificantLongTermsBucketAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message SignificantLongTermsBucket {
  int64 doc_count = 1;

  double score = 2;

  int64 bg_count = 3;

  int64 key = 4;

  optional string key_as_string = 5;
}
message SignificantStringTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SignificantTermsAggregateBaseSignificantStringTermsBucketAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message SignificantStringTermsBucket {
  int64 doc_count = 1;

  double score = 2;

  int64 bg_count = 3;

  string key = 4;
}
message SignificantTermsAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message SignificantTermsAggregateBaseSignificantLongTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SignificantTermsAggregateBaseSignificantLongTermsBucketAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message SignificantTermsAggregateBaseSignificantLongTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, SignificantLongTermsBucket> significant_long_terms_bucket = 3;
}
message SignificantTermsAggregateBaseSignificantStringTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SignificantTermsAggregateBaseSignificantStringTermsBucketAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message SignificantTermsAggregateBaseSignificantStringTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, SignificantStringTermsBucket> significant_string_terms_bucket = 3;
}
message SignificantTermsAggregateBaseVoid {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SignificantTermsAggregateBaseVoidAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message SignificantTermsAggregateBaseVoidAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, ObjectMap> void = 3;
}
message SignificantTermsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional QueryContainer background_filter = 5;

  optional ChiSquareHeuristic chi_square = 6;

  repeated string exclude = 7;

  optional TermsAggregationExecutionHint execution_hint = 8;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 9;

  optional GoogleNormalizedDistanceHeuristic gnd = 10;

  optional TermsInclude include = 11;

  // An empty object with no properties.
  optional ObjectMap jlh = 12;

  // Only return terms that are found in more than `min_doc_count` hits.
  optional int64 min_doc_count = 13;

  optional MutualInformationHeuristic mutual_information = 14;

  optional ObjectMap percentage = 15;

  optional ScriptedHeuristic script_heuristic = 16;

  // Regulates the certainty a shard has if the term should actually be added to the candidate list or not with respect to the `min_doc_count`. Terms will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.
  optional int64 shard_min_doc_count = 17;

  // Can be used to control the volumes of candidate terms produced by each shard. By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
  optional int32 shard_size = 18;

  // The number of buckets returned out of the overall terms list.
  optional int32 size = 19;
}
message SignificantTermsBucketBase {
  int64 doc_count = 1;

  double score = 2;

  int64 bg_count = 3;
}
message SignificantTextAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional QueryContainer background_filter = 5;

  optional ChiSquareHeuristic chi_square = 6;

  repeated string exclude = 7;

  optional TermsAggregationExecutionHint execution_hint = 8;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 9;

  // Whether to out duplicate text to deal with noisy data.
  optional bool filter_duplicate_text = 10;

  optional GoogleNormalizedDistanceHeuristic gnd = 11;

  optional TermsInclude include = 12;

  // An empty object with no properties.
  optional ObjectMap jlh = 13;

  // Only return values that are found in more than `min_doc_count` hits.
  optional int64 min_doc_count = 14;

  optional MutualInformationHeuristic mutual_information = 15;

  optional ObjectMap percentage = 16;

  optional ScriptedHeuristic script_heuristic = 17;

  // Regulates the certainty a shard has if the values should actually be added to the candidate list or not with respect to the `min_doc_count`. Values will only be considered if their local shard frequency within the set is higher than the `shard_min_doc_count`.
  optional int64 shard_min_doc_count = 18;

  // The number of candidate terms produced by each shard. By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
  optional int32 shard_size = 19;

  // The number of buckets returned out of the overall terms list.
  optional int32 size = 20;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string source_fields = 21;
}
message SimpleAnalyzer {
  SimpleAnalyzerType type = 1;

  optional string version = 2;
}
enum SimpleAnalyzerType {
  SIMPLE_ANALYZER_TYPE_UNSPECIFIED = 0;
  SIMPLE_ANALYZER_TYPE_SIMPLE = 1;
}
message SimpleMovingAverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;

  optional bool minimize = 6;

  optional int32 predict = 7;

  optional int32 window = 8;

  SimpleMovingAverageAggregationAllOfModel model = 9;

  // An empty object with no properties.
  ObjectMap settings = 10;
}
enum SimpleMovingAverageAggregationAllOfModel {
  SIMPLE_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_UNSPECIFIED = 0;
  SIMPLE_MOVING_AVERAGE_AGGREGATION_ALL_OF_MODEL_SIMPLE = 1;
}
enum SimpleQueryStringFlag {
  SIMPLE_QUERY_STRING_FLAG_UNSPECIFIED = 0;
  SIMPLE_QUERY_STRING_FLAG_ALL = 1;
  SIMPLE_QUERY_STRING_FLAG_AND = 2;
  SIMPLE_QUERY_STRING_FLAG_ESCAPE = 3;
  SIMPLE_QUERY_STRING_FLAG_FUZZY = 4;
  SIMPLE_QUERY_STRING_FLAG_NEAR = 5;
  SIMPLE_QUERY_STRING_FLAG_NONE = 6;
  SIMPLE_QUERY_STRING_FLAG_NOT = 7;
  SIMPLE_QUERY_STRING_FLAG_OR = 8;
  SIMPLE_QUERY_STRING_FLAG_PHRASE = 9;
  SIMPLE_QUERY_STRING_FLAG_PRECEDENCE = 10;
  SIMPLE_QUERY_STRING_FLAG_PREFIX = 11;
  SIMPLE_QUERY_STRING_FLAG_SLOP = 12;
  SIMPLE_QUERY_STRING_FLAG_WHITESPACE = 13;
}
message SimpleQueryStringFlags {
  oneof simple_query_string_flags {
    SimpleQueryStringFlag single = 1;

    string multiple = 2;
  }
}
message SimpleQueryStringQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Analyzer used to convert text in the query string into tokens.
  optional string analyzer = 3;

  // If `true`, the query attempts to analyze wildcard terms in the query string.
  optional bool analyze_wildcard = 4;

  // If `true`, the parser creates a `match_phrase` query for each multi-position token.
  optional bool auto_generate_synonyms_phrase_query = 5;

  optional Operator default_operator = 6;

  // Array of fields you wish to search. Accepts wildcard expressions. You also can boost relevance scores for matches to particular fields using a caret (`^`) notation. Defaults to the `index.query.default_field index` setting, which has a default value of `*`.
  repeated string fields = 7;

  optional SimpleQueryStringFlags flags = 8;

  // Maximum number of terms to which the query expands for fuzzy matching.
  optional int32 fuzzy_max_expansions = 9;

  // Number of beginning characters left unchanged for fuzzy matching.
  optional int32 fuzzy_prefix_length = 10;

  // If `true`, edits for fuzzy matching include transpositions of two adjacent characters (for example, `ab` to `ba`).
  optional bool fuzzy_transpositions = 11;

  // If `true`, format-based errors, such as providing a text value for a numeric field, are ignored.
  optional bool lenient = 12;

  optional MinimumShouldMatch minimum_should_match = 13;

  // Query string in the simple query string syntax you wish to parse and use for search.
  string query = 14;

  // Suffix appended to quoted text in the query string.
  optional string quote_field_suffix = 15;
}
message SimpleValueAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message SingleBucketAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 doc_count = 2;

  map<string, Aggregate> aggregations = 3;
}
message SingleMetricAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message SingleMetricAggregateBaseAllOfValue {
  oneof single_metric_aggregate_base_all_of_value {
    double double = 1;

    NullValue null_value = 2;
  }
}
message SlicedScroll {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  // The ID of the slice.
  int32 id = 2;

  // The maximum number of slices.
  int32 max = 3;
}
message SmartcnAnalyzer {
  optional SmartcnAnalyzerType type = 1;
}
enum SmartcnAnalyzerType {
  SMARTCN_ANALYZER_TYPE_UNSPECIFIED = 0;
  SMARTCN_ANALYZER_TYPE_SMARTCN = 1;
}
message SmoothingModel {
  optional LaplaceSmoothingModel laplace = 1;

  optional LinearInterpolationSmoothingModel linear_interpolation = 2;

  optional StupidBackoffSmoothingModel stupid_backoff = 3;
}
message SnowballAnalyzer {
  SnowballAnalyzerType type = 1;

  optional string version = 2;

  SnowballLanguage language = 3;

  repeated string stopwords = 4;
}
enum SnowballAnalyzerType {
  SNOWBALL_ANALYZER_TYPE_UNSPECIFIED = 0;
  SNOWBALL_ANALYZER_TYPE_SNOWBALL = 1;
}
enum SnowballLanguage {
  SNOWBALL_LANGUAGE_UNSPECIFIED = 0;
  SNOWBALL_LANGUAGE_ARMENIAN = 1;
  SNOWBALL_LANGUAGE_BASQUE = 2;
  SNOWBALL_LANGUAGE_CATALAN = 3;
  SNOWBALL_LANGUAGE_DANISH = 4;
  SNOWBALL_LANGUAGE_DUTCH = 5;
  SNOWBALL_LANGUAGE_ENGLISH = 6;
  SNOWBALL_LANGUAGE_FINNISH = 7;
  SNOWBALL_LANGUAGE_FRENCH = 8;
  SNOWBALL_LANGUAGE_GERMAN = 9;
  SNOWBALL_LANGUAGE_GERMAN2 = 10;
  SNOWBALL_LANGUAGE_HUNGARIAN = 11;
  SNOWBALL_LANGUAGE_ITALIAN = 12;
  SNOWBALL_LANGUAGE_KP = 13;
  SNOWBALL_LANGUAGE_LOVINS = 14;
  SNOWBALL_LANGUAGE_NORWEGIAN = 15;
  SNOWBALL_LANGUAGE_PORTER = 16;
  SNOWBALL_LANGUAGE_PORTUGUESE = 17;
  SNOWBALL_LANGUAGE_ROMANIAN = 18;
  SNOWBALL_LANGUAGE_RUSSIAN = 19;
  SNOWBALL_LANGUAGE_SPANISH = 20;
  SNOWBALL_LANGUAGE_SWEDISH = 21;
  SNOWBALL_LANGUAGE_TURKISH = 22;
}
message SortCombinations {
  oneof sort_combinations {
    // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
    string field = 1;

    StringMap field_with_direction = 2;

    FieldSortMap field_with_order = 3;

    SortOptions options = 4;
  }
}
enum SortMode {
  SORT_MODE_UNSPECIFIED = 0;
  SORT_MODE_AVG = 1;
  SORT_MODE_MAX = 2;
  SORT_MODE_MEDIAN = 3;
  SORT_MODE_MIN = 4;
  SORT_MODE_SUM = 5;
}
message SortOptions {
  optional ScoreSort x_score = 1;

  optional GeoDistanceSort x_geo_distance = 2;

  optional ScriptSort x_script = 3;
}
enum SortOrder {
  SORT_ORDER_UNSPECIFIED = 0;
  SORT_ORDER_ASC = 1;
  SORT_ORDER_DESC = 2;
}
message SourceConfig {
  oneof source_config {
    bool fetch = 1;

    SourceFilter filter = 2;
  }
}
message SourceConfigParam {
  oneof source_config_param {
    bool fetch = 1;

    StringArray fields = 2;
  }
}
message SourceFilter {
  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string excludes = 1;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string includes = 2;
}
message SpanContainingQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  SpanQuery big = 3;

  SpanQuery little = 4;
}
message SpanFieldMaskingQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 3;

  SpanQuery query = 4;
}
message SpanFirstQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Controls the maximum end position permitted in a match.
  int32 end = 3;

  SpanQuery match = 4;
}
message SpanGapQuery {
  string field = 1;

  optional int32 span_width = 2;
}
message SpanMultiTermQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  QueryContainer match = 3;
}
message SpanNearQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Array of one or more other span type queries.
  repeated SpanQuery clauses = 3;

  // Controls whether matches are required to be in-order.
  optional bool in_order = 4;

  // Controls the maximum number of intervening unmatched positions permitted.
  optional int32 slop = 5;
}
message SpanNotQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The number of tokens from within the include span that can't have overlap with the exclude span. Equivalent to setting both `pre` and `post`.
  optional int32 dist = 3;

  SpanQuery exclude = 4;

  SpanQuery include = 5;

  // The number of tokens after the include span that can't have overlap with the exclude span.
  optional int32 post = 6;

  // The number of tokens before the include span that can't have overlap with the exclude span.
  optional int32 pre = 7;
}
message SpanOrQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Array of one or more other span type queries.
  repeated SpanQuery clauses = 3;
}
message SpanQuery {
  optional SpanContainingQuery span_containing = 1;

  optional SpanFieldMaskingQuery field_masking_span = 2;

  optional SpanFirstQuery span_first = 3;

  optional SpanGapQuery span_gap = 4;

  optional SpanMultiTermQuery span_multi = 5;

  optional SpanNearQuery span_near = 6;

  optional SpanNotQuery span_not = 7;

  optional SpanOrQuery span_or = 8;

  // The equivalent of the `term` query but for use with other span queries.
  optional SpanTermQuery span_term = 9;

  optional SpanWithinQuery span_within = 10;
}
message SpanTermQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  string value = 3;

  string field = 4;
}
message SpanWithinQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  SpanQuery big = 3;

  SpanQuery little = 4;
}
message StandardAnalyzer {
  StandardAnalyzerType type = 1;

  optional int32 max_token_length = 2;

  repeated string stopwords = 3;
}
enum StandardAnalyzerType {
  STANDARD_ANALYZER_TYPE_UNSPECIFIED = 0;
  STANDARD_ANALYZER_TYPE_STANDARD = 1;
}
message StandardDeviationBounds {
  StandardDeviationBoundsUpper upper = 1;

  StandardDeviationBoundsLower lower = 2;

  StandardDeviationBoundsUpperPopulation upper_population = 3;

  StandardDeviationBoundsLowerPopulation lower_population = 4;

  StandardDeviationBoundsUpperSampling upper_sampling = 5;

  StandardDeviationBoundsLowerSampling lower_sampling = 6;
}
message StandardDeviationBoundsAsString {
  string upper = 1;

  string lower = 2;

  string upper_population = 3;

  string lower_population = 4;

  string upper_sampling = 5;

  string lower_sampling = 6;
}
message StandardDeviationBoundsLower {
  oneof standard_deviation_bounds_lower {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StandardDeviationBoundsLowerPopulation {
  oneof standard_deviation_bounds_lower_population {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StandardDeviationBoundsLowerSampling {
  oneof standard_deviation_bounds_lower_sampling {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StandardDeviationBoundsUpper {
  oneof standard_deviation_bounds_upper {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StandardDeviationBoundsUpperPopulation {
  oneof standard_deviation_bounds_upper_population {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StandardDeviationBoundsUpperSampling {
  oneof standard_deviation_bounds_upper_sampling {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StatsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  StatsAggregateBaseAllOfMin min = 3;

  StatsAggregateBaseAllOfMax max = 4;

  StatsAggregateBaseAllOfAvg avg = 5;

  double sum = 6;

  optional string min_as_string = 7;

  optional string max_as_string = 8;

  optional string avg_as_string = 9;

  optional string sum_as_string = 10;
}
message StatsAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  StatsAggregateBaseAllOfMin min = 3;

  StatsAggregateBaseAllOfMax max = 4;

  StatsAggregateBaseAllOfAvg avg = 5;

  double sum = 6;

  optional string min_as_string = 7;

  optional string max_as_string = 8;

  optional string avg_as_string = 9;

  optional string sum_as_string = 10;
}
message StatsAggregateBaseAllOfAvg {
  oneof stats_aggregate_base_all_of_avg {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StatsAggregateBaseAllOfMax {
  oneof stats_aggregate_base_all_of_max {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StatsAggregateBaseAllOfMin {
  oneof stats_aggregate_base_all_of_min {
    double double = 1;

    NullValue null_value = 2;
  }
}
message StatsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
message StatsBucketAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  int64 count = 2;

  StatsAggregateBaseAllOfMin min = 3;

  StatsAggregateBaseAllOfMax max = 4;

  StatsAggregateBaseAllOfAvg avg = 5;

  double sum = 6;

  optional string min_as_string = 7;

  optional string max_as_string = 8;

  optional string avg_as_string = 9;

  optional string sum_as_string = 10;
}
message StatsBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message StopAnalyzer {
  StopAnalyzerType type = 1;

  optional string version = 2;

  repeated string stopwords = 3;

  optional string stopwords_path = 4;
}
enum StopAnalyzerType {
  STOP_ANALYZER_TYPE_UNSPECIFIED = 0;
  STOP_ANALYZER_TYPE_STOP = 1;
}
message StoredScriptId {
  // Specifies any named parameters that are passed into the script as variables.  Use parameters instead of hard-coded values to decrease compilation time.
  optional ObjectMap params = 1;

  // The unique identifier for a resource.
  string id = 2;
}
message StringArray {
  repeated string string_array = 1;
}
enum StringDistance {
  STRING_DISTANCE_UNSPECIFIED = 0;
  STRING_DISTANCE_DAMERAU_LEVENSHTEIN = 1;
  STRING_DISTANCE_INTERNAL = 2;
  STRING_DISTANCE_JARO_WINKLER = 3;
  STRING_DISTANCE_LEVENSHTEIN = 4;
  STRING_DISTANCE_NGRAM = 5;
}
message StringMap {
  map<string, string> string_map = 1;
}
message StringRareTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseStringRareTermsBucketAllOfBuckets buckets = 2;
}
message StringRareTermsBucket {
  int64 doc_count = 1;

  string key = 2;
}
message StringTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseStringTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message StringTermsBucket {
  int64 doc_count = 1;

  optional int64 doc_count_error = 2;

  string key = 3;
}
message StringifiedInteger {
  oneof stringified_integer {
    int32 int32 = 1;

    string string = 2;
  }
}
message StupidBackoffSmoothingModel {
  double discount = 1;
}
message Suggest {
  oneof suggest {
    Completion completion = 1;

    PhraseSuggest phrase = 2;

    TermSuggest term = 3;
  }
}
message SuggestArray {
  repeated Suggest suggest_array = 1;
}
message SuggestBase {
  int32 length = 1;

  int32 offset = 2;

  string text = 3;
}
message SuggestFuzziness {
  string fuzziness = 1;

  int32 min_length = 2;

  int32 prefix_length = 3;

  bool transpositions = 4;

  bool unicode_aware = 5;
}
enum SuggestMode {
  SUGGEST_MODE_UNSPECIFIED = 0;
  SUGGEST_MODE_ALWAYS = 1;
  SUGGEST_MODE_MISSING = 2;
  SUGGEST_MODE_POPULAR = 3;
}
enum SuggestSort {
  SUGGEST_SORT_UNSPECIFIED = 0;
  SUGGEST_SORT_FREQUENCY = 1;
  SUGGEST_SORT_SCORE = 2;
}
message Suggester {
  // The global suggest text, which avoids repetition when the same text is used in several suggesters.
  optional string text = 1;
}
message SuggesterBase {
  optional string analyzer = 1;

  string field = 2;

  optional int32 size = 3;
}
message SumAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message SumAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
message SumBucketAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional BucketsPath buckets_path = 3;

  // `DecimalFormat` pattern for the output value. If specified, the formatted value is returned in the aggregation's `value_as_string` property.
  optional string format = 4;

  optional GapPolicy gap_policy = 5;
}
message TDigest {
  // Limits the maximum number of nodes used by the underlying TDigest algorithm to `20 * compression`, enabling control of memory usage and approximation error.
  optional int32 compression = 1;
}
message TDigestPercentileRanksAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  Percentiles values = 2;
}
message TDigestPercentilesAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  Percentiles values = 2;
}
message TTestAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TTestAggregateAllOfValue value = 2;

  optional string value_as_string = 3;
}
message TTestAggregateAllOfValue {
  oneof t_test_aggregate_all_of_value {
    double double = 1;

    NullValue null_value = 2;
  }
}
message TTestAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  optional TestPopulation a = 3;

  optional TestPopulation b = 4;

  optional TTestType type = 5;
}
enum TTestType {
  T_TEST_TYPE_UNSPECIFIED = 0;
  T_TEST_TYPE_HETEROSCEDASTIC = 1;
  T_TEST_TYPE_HOMOSCEDASTIC = 2;
  T_TEST_TYPE_PAIRED = 3;
}
message TermQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  FieldValue value = 3;

  // Allows ASCII case insensitive matching of the value with the indexed field values when set to `true`. When `false`, the case sensitivity of matching depends on the underlying field's mapping.
  optional bool case_insensitive = 4;

  string field = 5;
}
message TermSuggest {
  int32 length = 1;

  int32 offset = 2;

  string text = 3;

  repeated TermSuggestOption options = 4;
}
message TermSuggestOption {
  string text = 1;

  double score = 2;

  optional int64 freq = 3;

  optional string highlighted = 4;

  optional bool collate_match = 5;
}
message TermSuggester {
  optional string analyzer = 1;

  string field = 2;

  optional int32 size = 3;

  optional bool lowercase_terms = 4;

  optional int32 max_edits = 5;

  optional int32 max_inspections = 6;

  optional float max_term_freq = 7;

  optional float min_doc_freq = 8;

  optional int32 min_word_length = 9;

  optional int32 prefix_length = 10;

  optional int32 shard_size = 11;

  optional SuggestSort sort = 12;

  optional StringDistance string_distance = 13;

  optional SuggestMode suggest_mode = 14;

  optional string text = 15;
}
message TermsAggregateBase {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message TermsAggregateBaseDoubleTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseDoubleTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message TermsAggregateBaseDoubleTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, DoubleTermsBucket> double_terms_bucket = 3;
}
message TermsAggregateBaseLongTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseLongTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message TermsAggregateBaseLongTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, LongTermsBucket> long_terms_bucket = 3;
}
message TermsAggregateBaseMultiTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseMultiTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message TermsAggregateBaseMultiTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, MultiTermsBucket> multi_terms_bucket = 3;
}
message TermsAggregateBaseStringTermsBucket {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseStringTermsBucketAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message TermsAggregateBaseStringTermsBucketAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, StringTermsBucket> string_terms_bucket = 3;
}
message TermsAggregateBaseVoid {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseVoidAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message TermsAggregateBaseVoidAllOfBuckets {
  map<string, ObjectMap> null_map = 1;

  repeated ObjectMap null_array = 2;

  map<string, ObjectMap> void = 3;
}
message TermsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggregations = 3;

  // Sub-aggregations for this bucket aggregation
  map<string, AggregationContainer> aggs = 4;

  optional TermsAggregationCollectMode collect_mode = 5;

  repeated string exclude = 6;

  optional TermsAggregationExecutionHint execution_hint = 7;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 8;

  optional TermsInclude include = 9;

  // Only return values that are found in more than `min_doc_count` hits.
  optional int32 min_doc_count = 10;

  optional FieldValue missing = 11;

  optional MissingOrder missing_order = 12;

  optional bool missing_bucket = 13;

  // Coerced unmapped fields into the specified type.
  optional string value_type = 14;

  repeated StringMap order = 15;

  optional Script script = 16;

  // The number of candidate terms produced by each shard. By default, `shard_size` will be automatically estimated based on the number of shards and the `size` parameter.
  optional int32 shard_size = 17;

  // Set to `true` to return the `doc_count_error_upper_bound`, which is an upper bound to the error on the `doc_count` returned by each shard.
  optional bool show_term_doc_count_error = 18;

  // The number of buckets returned out of the overall terms list.
  optional int32 size = 19;

  optional string format = 20;
}
enum TermsAggregationCollectMode {
  TERMS_AGGREGATION_COLLECT_MODE_UNSPECIFIED = 0;
  TERMS_AGGREGATION_COLLECT_MODE_BREADTH_FIRST = 1;
  TERMS_AGGREGATION_COLLECT_MODE_DEPTH_FIRST = 2;
}
enum TermsAggregationExecutionHint {
  TERMS_AGGREGATION_EXECUTION_HINT_UNSPECIFIED = 0;
  TERMS_AGGREGATION_EXECUTION_HINT_GLOBAL_ORDINALS = 1;
  TERMS_AGGREGATION_EXECUTION_HINT_GLOBAL_ORDINALS_HASH = 2;
  TERMS_AGGREGATION_EXECUTION_HINT_GLOBAL_ORDINALS_LOW_CARDINALITY = 3;
  TERMS_AGGREGATION_EXECUTION_HINT_MAP = 4;
}
message TermsBucketBase {
  int64 doc_count = 1;

  optional int64 doc_count_error = 2;
}
message TermsInclude {
  oneof terms_include {
    StringArray string_array = 1;

    TermsPartition partition = 2;
  }
}
message TermsLookup {
  string index = 1;

  // The unique identifier for a resource.
  string id = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string path = 3;

  // The routing value for the document.
  optional string routing = 4;

  optional bool store = 5;
}
message TermsPartition {
  // The number of partitions.
  int64 num_partitions = 1;

  // The partition number for this request.
  int64 partition = 2;
}
message TermsQuery {
  optional ObjectMap boost = 1;

  optional ObjectMap x_name = 2;

  // Specifies the types of values used for filtering. Valid values are `default` and `bitmap`. Default is `default`.
  optional TermsQueryValueType value_type = 3;

  map<string, TermsQueryField> terms = 4;
}
message TermsQueryField {
  oneof terms_query_field {
    FieldValueArray field_value_array = 1;

    TermsLookup lookup = 2;
  }
}
enum TermsQueryValueType {
  TERMS_QUERY_VALUE_TYPE_UNSPECIFIED = 0;
  TERMS_QUERY_VALUE_TYPE_BITMAP = 1;
  TERMS_QUERY_VALUE_TYPE_DEFAULT = 2;
}
message TermsSetQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string minimum_should_match_field = 3;

  optional Script minimum_should_match_script = 4;

  repeated string terms = 5;

  string field = 6;
}
message TestPopulation {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  string field = 1;

  optional Script script = 2;

  optional QueryContainer filter = 3;
}
enum TextQueryType {
  TEXT_QUERY_TYPE_UNSPECIFIED = 0;
  TEXT_QUERY_TYPE_BEST_FIELDS = 1;
  TEXT_QUERY_TYPE_BOOL_PREFIX = 2;
  TEXT_QUERY_TYPE_CROSS_FIELDS = 3;
  TEXT_QUERY_TYPE_MOST_FIELDS = 4;
  TEXT_QUERY_TYPE_PHRASE = 5;
  TEXT_QUERY_TYPE_PHRASE_PREFIX = 6;
}
message TopHitsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  HitsMetadataJsonValue hits = 2;
}
message TopHitsAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string docvalue_fields = 6;

  // If `true`, returns detailed information about score computation as part of a hit.
  optional bool explain = 7;

  // Starting document offset.
  optional int32 from = 8;

  optional Highlight highlight = 9;

  // Returns the result of one or more script evaluations for each hit.
  map<string, ScriptField> script_fields = 10;

  // The maximum number of top matching hits to return per bucket.
  optional int32 size = 11;

  repeated SortCombinations sort = 12;

  // A comma-separated list or a wildcard expression specifying the fields to include in the statistics. Used as the default list unless a specific field list is provided in the `completion_fields` or `fielddata_fields` parameters.
  repeated string stored_fields = 13;

  // If `true`, calculates and returns document scores, even if the scores are not used for sorting.
  optional bool track_scores = 14;

  // If `true`, returns document version as part of a hit.
  optional bool version = 15;

  // If `true`, returns sequence number and primary term of the last modification of each hit.
  optional bool seq_no_primary_term = 16;

  optional SourceConfig x_source = 17;
}
message TopLeftBottomRightGeoBounds {
  // The upper-left corner coordinates.
  GeoLocation top_left = 1;

  // The lower-right corner coordinates.
  GeoLocation bottom_right = 2;
}
message TopRightBottomLeftGeoBounds {
  // The upper-right corner coordinates.
  GeoLocation top_right = 1;

  // The lower-left corner coordinates.
  GeoLocation bottom_left = 2;
}
message TotalHits {
  TotalHitsRelation relation = 1;

  int64 value = 2;
}
enum TotalHitsRelation {
  TOTAL_HITS_RELATION_UNSPECIFIED = 0;
  TOTAL_HITS_RELATION_EQ = 1;
  TOTAL_HITS_RELATION_GTE = 2;
}
message TrackHits {
  oneof track_hits {
    bool enabled = 1;

    int32 count = 2;
  }
}
message TypeQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  string value = 3;
}
message UnmappedRareTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseVoidAllOfBuckets buckets = 2;
}
message UnmappedSignificantTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SignificantTermsAggregateBaseVoidAllOfBuckets buckets = 2;

  optional int64 bg_count = 3;

  optional int64 doc_count = 4;
}
message UnmappedTermsAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  TermsAggregateBaseVoidAllOfBuckets buckets = 2;

  optional int64 doc_count_error_upper_bound = 3;

  optional int64 sum_other_doc_count = 4;
}
message UpdateAction {
  // When `false` disables the setting `result` in the response to `noop` if no change to the document occurred.
  optional bool detect_noop = 1;

  // A partial update to an existing document.
  optional ObjectMap doc = 2;

  // When `true`, uses the contents of `doc` as the value of `upsert`.
  optional bool doc_as_upsert = 3;

  optional Script script = 4;

  // When `true`, executes the script whether or not the document exists.
  optional bool scripted_upsert = 5;

  // If the document does not already exist, the contents of `upsert` are inserted as a new document. If the document exists, the `script` is executed.
  optional ObjectMap upsert = 6;

  optional SourceConfig x_source = 7;
}
message UpdateOperation {
  // The routing value for the document.
  optional string routing = 1;

  // The unique identifier for a resource.
  optional string x_id = 2;

  optional string x_index = 3;

  optional int64 if_primary_term = 4;

  // The sequence number of the document.
  optional int64 if_seq_no = 5;

  // When `true`, the request's actions must target an index alias.
  optional bool require_alias = 6;

  optional int32 retry_on_conflict = 7;
}
message ValueCountAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message ValueCountAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 3;

  optional FieldValue missing = 4;

  optional Script script = 5;

  optional string format = 6;
}
enum ValueType {
  VALUE_TYPE_UNSPECIFIED = 0;
  VALUE_TYPE_BOOLEAN = 1;
  VALUE_TYPE_DATE = 2;
  VALUE_TYPE_DATE_NANOS = 3;
  VALUE_TYPE_DOUBLE = 4;
  VALUE_TYPE_GEO_POINT = 5;
  VALUE_TYPE_IP = 6;
  VALUE_TYPE_LONG = 7;
  VALUE_TYPE_NUMBER = 8;
  VALUE_TYPE_NUMERIC = 9;
  VALUE_TYPE_STRING = 10;
}
message VariableWidthHistogramAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  MultiBucketAggregateBaseVariableWidthHistogramBucketAllOfBuckets buckets = 2;
}
message VariableWidthHistogramAggregation {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  // The target number of buckets.
  optional int32 buckets = 2;

  // The number of buckets that the coordinating node will request from each shard. Defaults to `buckets * 50`.
  optional int32 shard_size = 3;

  // Specifies the number of individual documents that will be stored in memory on a shard before the initial bucketing algorithm is run. Defaults to `min(10 * shard_size, 50000)`.
  optional int32 initial_buffer = 4;
}
message VariableWidthHistogramBucket {
  int64 doc_count = 1;

  double min = 2;

  double key = 3;

  double max = 4;

  optional string min_as_string = 5;

  optional string key_as_string = 6;

  optional string max_as_string = 7;
}
enum VersionType {
  VERSION_TYPE_UNSPECIFIED = 0;
  VERSION_TYPE_EXTERNAL = 1;
  VERSION_TYPE_EXTERNAL_GTE = 2;
  VERSION_TYPE_FORCE = 3;
  VERSION_TYPE_INTERNAL = 4;
}
enum WaitForActiveShardOptions {
  WAIT_FOR_ACTIVE_SHARD_OPTIONS_UNSPECIFIED = 0;
  WAIT_FOR_ACTIVE_SHARD_OPTIONS_ALL = 1;
  WAIT_FOR_ACTIVE_SHARD_OPTIONS_NULL = 2;
}
message WaitForActiveShards {
  oneof wait_for_active_shards {
    // The number of active shards to wait for.
    StringifiedInteger count = 1;

    // Determines how many shards to wait for.
    WaitForActiveShardOptions option = 2;
  }
}
enum Week {
  WEEK_UNSPECIFIED = 0;
  WEEK_WEEK = 1;
  WEEK__1W = 2;
}
message WeightedAverageAggregation {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  optional string name = 2;

  // A numeric response formatter.
  optional string format = 3;

  optional WeightedAverageValue value = 4;

  optional ValueType value_type = 5;

  optional WeightedAverageValue weight = 6;
}
message WeightedAverageValue {
  // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
  optional string field = 1;

  // A value or weight to use if the field is missing.
  optional double missing = 2;

  optional Script script = 3;
}
message WeightedAvgAggregate {
  // The custom metadata attached to a resource.
  optional ObjectMap meta = 1;

  SingleMetricAggregateBaseAllOfValue value = 2;

  optional string value_as_string = 3;
}
message WhitespaceAnalyzer {
  WhitespaceAnalyzerType type = 1;

  optional string version = 2;
}
enum WhitespaceAnalyzerType {
  WHITESPACE_ANALYZER_TYPE_UNSPECIFIED = 0;
  WHITESPACE_ANALYZER_TYPE_WHITESPACE = 1;
}
message WildcardQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // Allows case insensitive matching of the pattern with the indexed field values when set to `true`. Default is `false` which means the case sensitivity of matching depends on the underlying field's mapping.
  optional bool case_insensitive = 3;

  optional MultiTermQueryRewrite rewrite = 4;

  // Wildcard pattern for terms you wish to find in the provided field. Required, when wildcard is not set.
  optional string value = 5;

  // Wildcard pattern for terms you wish to find in the provided field. Required, when value is not set.
  optional string wildcard = 6;

  string field = 7;
}
message WktGeoBounds {
  // The WKT string representation of the geographical bounds.
  string wkt = 1;
}
message WrapperQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  // A base64 encoded query. The binary data format can be any of JSON, YAML, CBOR or SMILE encodings
  string query = 3;
}
message WriteOperation {
  // The routing value for the document.
  optional string routing = 1;

  // The unique identifier for a resource.
  optional string x_id = 2;

  optional string x_index = 3;

  // The pipeline ID for preprocessing documents. When the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. When a final pipeline is configured, that pipeline will always run, regardless of the value of this parameter.
  optional string pipeline = 4;

  // When `true`, require that all actions target an index alias rather than an index. Default is `false`.
  optional bool require_alias = 5;
}
message XyShape {
  optional string type = 1;

  repeated ObjectMap coordinates = 2;
}
message XyShapeQuery {
  // Floating point number used to decrease or increase the relevance scores of the query. Boost values are relative to the default value of 1.0. A boost value between 0 and 1.0 decreases the relevance score. A value greater than 1.0 increases the relevance score.
  optional float boost = 1;

  optional string x_name = 2;

  optional bool ignore_unmapped = 3;

  map<string, XyShapeQueryField> xy_shape = 4;
}
message XyShapeQueryField {
  optional FieldLookup indexed_shape = 1;

  XyShape shape = 2;

  optional GeoShapeRelation relation = 3;
}
enum Year {
  YEAR_UNSPECIFIED = 0;
  YEAR_YEAR = 1;
  YEAR__1Y = 2;
}
enum ZeroTermsQuery {
  ZERO_TERMS_QUERY_UNSPECIFIED = 0;
  ZERO_TERMS_QUERY_ALL = 1;
  ZERO_TERMS_QUERY_NONE = 2;
}
