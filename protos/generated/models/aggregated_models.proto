/*
   This is auto generated by OpenAPI Generator. The source of OpenAPI is opensearch-api-specification
*/

syntax = "proto3";

package org.opensearch.protobufs;

message ObjectMap {
  map<string, Value> fields = 1;

  message Value {
    oneof value {
      int32 int32 = 1;
      int64 int64 = 2;
      float float = 3;
      double double = 4;
      string string = 5;
      bool bool = 6;
      ObjectMap object_map = 7;
      ListValue list_value = 8;
    }
  }

  // `ListValue` is a wrapper around a repeated field of values.
  // The JSON representation for `ListValue` is JSON array.
  message ListValue {
    // Repeated field of dynamically typed values.
    repeated Value value = 1;
  }
}
enum BuiltinScriptLanguage {
  BUILTIN_SCRIPT_LANGUAGE_UNSPECIFIED = 0;
  BUILTIN_SCRIPT_LANGUAGE_EXPRESSION = 1;
  BUILTIN_SCRIPT_LANGUAGE_JAVA = 2;
  BUILTIN_SCRIPT_LANGUAGE_MUSTACHE = 3;
  BUILTIN_SCRIPT_LANGUAGE_PAINLESS = 4;
}
message BulkRequestInner {
  optional OperationContainer operation_container = 1;

  optional UpdateAction update_action = 2;

  optional ObjectMap object_map = 3;
}
message ErrorCause {
  // The type of error.
  string type = 1;

  // A human-readable explanation of the error, in English.
  optional string reason = 2;

  // The server stack trace, present only if the `error_trace=true` parameter was sent with the request.
  optional string stack_trace = 3;

  optional ErrorCause caused_by = 4;

  repeated ErrorCause root_cause = 5;

  repeated ErrorCause suppressed = 6;
}
message Fields {
  oneof fields {
    // The path to a field or an array of paths. Some APIs support wildcards in the path, which allows you to select multiple fields.
    string string = 1;

    StringArray string_array = 2;
  }
}
message InlineGetDictUserDefined {
  // The fields retrieved from the document.
  optional ObjectMap fields = 1;

  // Whether the document was found.
  bool found = 2;

  // The sequence number of the document.
  optional int64 underscore_seq_no = 3;

  // The primary term of the document.
  optional int32 underscore_primary_term = 4;

  // The routing value for the document.
  optional string underscore_routing = 5;

  // The source of the document.
  optional ObjectMap underscore_source = 6;
}
message InlineObject {
  bool errors = 1;

  repeated ResponseItemMap items = 2;

  int64 took = 3;

  optional int64 ingest_took = 4;
}
message InlineScript {
  oneof inline_script {
    string source = 1;

    InlineScriptOneOf inline_script_one_of = 2;
  }
}
message InlineScriptOneOf {
  // Specifies any named parameters that are passed into the script as variables.  Use parameters instead of hard-coded values to decrease compilation time.
  optional ObjectMap params = 1;

  optional ScriptLanguage lang = 2;

  map<string, string> options = 3;

  // The script source.
  string source = 4;
}
message OperationBase {
  // The routing value for the document.
  optional string routing = 1;

  optional int64 if_primary_term = 2;

  // The sequence number of the document.
  optional int64 if_seq_no = 3;

  optional int64 version = 4;

  optional VersionType version_type = 5;

  // The unique identifier for a resource.
  optional string underscore_id = 6;

  optional string underscore_index = 7;
}
message OperationContainer {
  optional WriteOperation index = 1;

  optional WriteOperation create = 2;

  optional UpdateOperation update = 3;

  optional OperationBase delete = 4;
}
message Refresh {
  oneof refresh {
    // Whether to refresh the affected shards immediately.
    bool bool = 1;

    // Do not refresh the affected shards.
    bool refresh_false = 2;

    // Refresh the affected shards immediately.
    bool refresh_true = 3;

    // Wait for the changes to become visible before replying.
    bool refresh_wait_for = 4;
  }
}
message ResponseItem {
  // HTTP status code returned for the operation.
  int32 status = 1;

  optional ErrorCause error = 2;

  // Result of the operation. Successful values are `created`, `deleted`, and `updated`.
  optional string result = 3;

  optional bool forced_refresh = 4;

  optional InlineGetDictUserDefined get = 5;

  // The document type.
  optional string underscore_type = 6;

  // The document ID associated with the operation.
  optional string underscore_id = 7;

  // The name of the index associated with the operation. If the operation targets a data stream, this is the backing index into which the document was written.
  optional string underscore_index = 8;

  // The primary term assigned to the document for the operation.
  optional int64 underscore_primary_term = 9;

  // The sequence number of the document.
  optional int64 underscore_seq_no = 10;

  optional ShardStatistics underscore_shards = 11;

  optional int64 underscore_version = 12;
}
message ResponseItemMap {
  map<string, ResponseItem> response_item_map = 1;
}
message Script {
  oneof script {
    InlineScript inline = 1;

    StoredScriptId stored = 2;
  }
}
message ScriptBase {
  // Specifies any named parameters that are passed into the script as variables.  Use parameters instead of hard-coded values to decrease compilation time.
  optional ObjectMap params = 1;
}
message ScriptLanguage {
  optional BuiltinScriptLanguage builtin = 1;

  optional string custom = 2;
}
message ShardFailure {
  optional string index = 1;

  optional string node = 2;

  ErrorCause reason = 3;

  int32 shard = 4;

  optional string status = 5;
}
message ShardStatistics {
  int32 failed = 1;

  int32 successful = 2;

  int32 total = 3;

  repeated ShardFailure failures = 4;

  optional int32 skipped = 5;
}
message SourceConfig {
  oneof source_config {
    bool fetch = 1;

    SourceFilter filter = 2;
  }
}
message SourceConfigParam {
  oneof source_config_param {
    bool fetch = 1;

    Fields fields = 2;
  }
}
message SourceFilter {
  oneof source_filter {
    Fields includes = 1;

    SourceFilterOneOf source_filter_one_of = 2;
  }
}
message SourceFilterOneOf {
  optional Fields excludes = 1;

  optional Fields includes = 2;
}
message StoredScriptId {
  // Specifies any named parameters that are passed into the script as variables.  Use parameters instead of hard-coded values to decrease compilation time.
  optional ObjectMap params = 1;

  // The unique identifier for a resource.
  string id = 2;
}
message StringArray {
  repeated string string_array = 1;
}
message StringOrStringArray {
  oneof string_or_string_array {
    string string = 1;

    StringArray string_array = 2;
  }
}
message UpdateAction {
  // When `false` disables the setting `result` in the response to `noop` if no change to the document occurred.
  optional bool detect_noop = 1;

  // A partial update to an existing document.
  optional ObjectMap doc = 2;

  // When `true`, uses the contents of `doc` as the value of `upsert`.
  optional bool doc_as_upsert = 3;

  optional Script script = 4;

  // When `true`, executes the script whether or not the document exists.
  optional bool scripted_upsert = 5;

  // If the document does not already exist, the contents of `upsert` are inserted as a new document. If the document exists, the `script` is executed.
  optional ObjectMap upsert = 6;

  optional SourceConfig underscore_source = 7;
}
message UpdateOperation {
  // The routing value for the document.
  optional string routing = 1;

  optional int64 if_primary_term = 2;

  // The sequence number of the document.
  optional int64 if_seq_no = 3;

  optional int64 version = 4;

  optional VersionType version_type = 5;

  // The unique identifier for a resource.
  optional string underscore_id = 6;

  optional string underscore_index = 7;

  // When `true`, the request's actions must target an index alias.
  optional bool require_alias = 8;

  optional int32 retry_on_conflict = 9;
}
message VersionType {
  oneof version_type {
    // The version number must be higher than the current version.
    bool version_type_external = 1;

    // The version number must be higher than or equal to the current version.
    bool version_type_external_gte = 2;

    // The version number is forced to be the given value.
    bool version_type_force = 3;

    // The version number is managed internally by OpenSearch.
    bool version_type_internal = 4;
  }
}
message WaitForActiveShardOptions {
  oneof wait_for_active_shard_options {
    // Wait for all shards to be active.
    bool wait_for_active_shard_options_all = 1;

    // Wait for the number of shards specified in the index settings.
    bool wait_for_active_shard_options_index_setting = 2;
  }
}
message WaitForActiveShards {
  oneof wait_for_active_shards {
    // The number of active shards to wait for.
    int32 count = 1;

    // Determines how many shards to wait for.
    WaitForActiveShardOptions option = 2;
  }
}
message WriteOperation {
  // The routing value for the document.
  optional string routing = 1;

  optional int64 if_primary_term = 2;

  // The sequence number of the document.
  optional int64 if_seq_no = 3;

  optional int64 version = 4;

  optional VersionType version_type = 5;

  // The unique identifier for a resource.
  optional string underscore_id = 6;

  optional string underscore_index = 7;

  // A map from the full name of fields to the name of dynamic templates. If a name matches a dynamic template, then that template will be applied regardless of other match predicates defined in the template. If a field is already defined in the mapping, then this parameter won't be used.
  map<string, string> dynamic_templates = 8;

  // The pipeline ID for preprocessing documents. When the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. When a final pipeline is configured, that pipeline will always run, regardless of the value of this parameter.
  optional string pipeline = 9;

  // When `true`, require that all actions target an index alias rather than an index. Default is `false`.
  optional bool require_alias = 10;
}
