/**
 This is generated from the spec. DO NOT manually modify.
 */
syntax = "proto3";
package org.opensearch.protobufs;

option java_multiple_files = true;
option java_package = "org.opensearch.protobufs";
option java_outer_classname = "DocumentProto";
option go_package = "github.com/opensearch-project/opensearch-protobufs/go/opensearchpb";

import "google/protobuf/struct.proto";
import "protos/schemas/common.proto";


// The bulk operation lets you add, update, or delete multiple documents in a single request, index name needs to be specified in `BulkRequestBody`
message BulkRequest {
  // [optional] If not provided here, index will be required in the BulkRequestBody instead
  optional string index = 1;
  // [optional] Set `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam x_source = 2;
  // [optional] A list of source fields to exclude from the response.
  repeated string x_source_excludes = 3;
  // [optional] A list of source fields to include in the response.
  repeated string x_source_includes = 4;
  // [optional] ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 5;
  // [optional] The enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 6;
  // [optional] If `true`, the request's actions must target an index alias. Defaults to false.
  optional bool require_alias = 7;
  // [optional] Custom value used to route operations to a specific shard.
  optional string routing = 8;
  // [optional] Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  // pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  // Defaults to 1m (one minute). This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  optional string timeout = 9;
  // [deprecated] The default document type for documents that don't specify a type. Default is _doc. We highly recommend ignoring this parameter and using a type of _doc for all indexes.
  optional string type = 10;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 11;
  // [required] The request body contains create, delete, index, and update actions and their associated source data
  repeated BulkRequestBody bulk_request_body = 12;
  // [optional] Global parameters
  optional GlobalParams global_params = 13;
}

message BulkRequestBody {
  // [required]
  OperationContainer operation_container = 1;
  // [optional]
  optional UpdateAction update_action = 2;
  // [optional]
  optional bytes object = 3;
}

message OperationContainer {
  // [required] operation to perform (index, create, update, or delete)
  oneof operation_container {
    // Indexes the specified document. If the document exists, replaces the document and increments the version. It must followed with source data to be indexed in `doc` field.
    IndexOperation index = 1;
    // Indexes the specified document if it does not already exist. It must followed with the source data to be indexed in `object` field.
    WriteOperation create = 2;
    // Performs a partial document update. It must followed with the partial document and update options in in `doc` field.
    UpdateOperation update = 3;
    // Removes the specified document from the index.
    DeleteOperation delete = 4;
  }
}

message UpdateAction {
  // [optional] When `false` disables the setting `result` in the response to `noop` if no change to the document occurred.
  optional bool detect_noop = 1;
  // [optional] A partial update to an existing document.
  // todo: generated proto is byte.
  optional bytes doc = 2;
  // [optional] When `true`, uses the contents of `doc` as the value of `upsert`.
  optional bool doc_as_upsert = 3;
  // [optional]
  optional Script script = 4;
  // [optional] When `true`, executes the script whether or not the document exists.
  optional bool scripted_upsert = 5;
  // [optional] If the document does not already exist, the contents of `upsert` are inserted as a new document. If the document exists, the `script` is executed.
  optional bytes upsert = 6;
  // [optional]
  optional SourceConfig x_source = 7;
}

enum OpType {
  OP_TYPE_UNSPECIFIED = 0;
  OP_TYPE_CREATE = 1;
  OP_TYPE_INDEX = 2;
}

enum VersionType {
  VERSION_TYPE_UNSPECIFIED = 0;
  VERSION_TYPE_EXTERNAL = 1;
  VERSION_TYPE_EXTERNAL_GTE = 2;
  VERSION_TYPE_INTERNAL = 3;
}

message IndexOperation {
  // [optional] The document ID. If no ID is specified, a document ID is automatically generated.
  optional string x_id = 1;
  // [optional] Name of the the data stream, index, or index alias to perform the action on. This parameter is required if index not specified in bulk request.
  optional string x_index = 2;

  // [optional] Custom value used to route operations to a specific shard.
  optional string routing = 3;

  // [optional] Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 4;
  // [optional] Only perform the operation if the document has this sequence number
  optional int64 if_seq_no = 5;

  // [optional] Set to create to only index the document if it does not already exist (put if absent). If a document with the specified `_id` already exists, the indexing operation will fail. Same as using the `<index>/_create` endpoint. Valid values: `index`, `create`. If document id is specified, it defaults to `index`. Otherwise, it defaults to `create`.
  optional OpType op_type = 6;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 7;

  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 8;

  // [optional] ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 9;

  // [optional] If `true`, the request's actions must target an index alias. Defaults to false.
  optional bool require_alias = 10;

}

message WriteOperation {
  // [optional] The routing value for the document.
  optional string routing = 1;

  // [optional] The unique identifier for a resource.
  optional string x_id = 2;
  // [optional]
  optional string x_index = 3;

  // [optional] The pipeline ID for preprocessing documents. When the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. When a final pipeline is configured, that pipeline will always run, regardless of the value of this parameter.
  optional string pipeline = 4;

  // [optional] When `true`, require that all actions target an index alias rather than an index. Default is `false`.
  optional bool require_alias = 5;
}

message UpdateOperation {
  // [required] The document ID.
  optional string x_id = 1;
  // [optional] Name of the the data stream, index, or index alias to perform the action on. This parameter is required if index not specified in bulk request.
  optional string x_index = 2;
  // [optional] Custom value used to route operations to a specific shard.
  optional string routing = 3;

  // [optional] Only perform the operation if the document has this primary term
  optional int64 if_primary_term = 4;
  // [optional] Only perform the operation if the document has this sequence number
  optional int64 if_seq_no = 5;
  // [optional] If `true`, the request's actions must target an index alias. Defaults to false.
  optional bool require_alias = 6;
  // [optional] Specify how many times an update should be retried in the case of a version conflict.
  optional int32 retry_on_conflict = 7;

}

message DeleteOperation {
  // [required] The document ID.
  optional string x_id = 1;
  // [optional] Name of the the data stream, index, or index alias to perform the action on. This parameter is required if index not specified in bulk request.
  optional string x_index = 2;
  // [optional] Custom value used to route operations to a specific shard.
  optional string routing = 3;

  // [optional] Only perform the operation if the document has this primary term
  optional int64 if_primary_term = 4;
  // [optional] Only perform the operation if the document has this sequence number
  optional int64 if_seq_no = 5;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 6;
  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 7;

}

// todo: Proposal Spec this name
message BulkResponse {
  // [required] If true, one or more of the operations in the bulk request did not complete successfully.
  bool errors = 1;
  // [required] Contains the result of each operation in the bulk request, in the order they were submitted.
  repeated Item items = 2;
  // [required] How long, in milliseconds, it took to process the bulk request.
  int64 took = 3;
  // [optional] How long, in milliseconds, it took to process documents through an ingest pipeline
  optional int64 ingest_took = 4;

}

message Item {
  oneof item {
    ResponseItem create = 1;
    ResponseItem delete = 2;
    ResponseItem index = 3;
    ResponseItem update = 4;
  }
}

enum ResponseOpType {
  RESPONSE_OP_TYPE_CREATE = 0;
  RESPONSE_OP_TYPE_INDEX = 1;
  RESPONSE_OP_TYPE_UPDATE = 2;
  RESPONSE_OP_TYPE_DELETE = 3;
}

message ResponseItem {
  // [required] Name of the index associated with the operation. If the operation targeted a data stream, this is the backing index into which the document was written.
  string x_index = 1;
  // [required] HTTP status code returned for the operation.
  // TODO: use grpc status code instead
  int32 status = 2;
  // [optional] The document type.
  optional string x_type = 3;

  // [optional] The document ID associated with the operation.
  optional Id x_id = 4;

  // [optional] Contains additional information about the failed operation.
  optional ErrorCause error = 5;

  // [optional] The primary term assigned to the document for the operation.
  optional int64 x_primary_term = 6;

  // [optional] Result of the operation. Successful values are `created`, `deleted`, and `updated`.
  optional string result = 7;
  // [optional] The sequence number assigned to the document for the operation. Sequence numbers are used to ensure an older version of a document doesn't overwrite a newer version
  optional int64 x_seq_no = 8;
  // [optional] Contains shard information for the operation. This parameter is only returned for successful operations.
  optional ShardInfo x_shards = 9;
  // [optional] The document version associated with the operation. The document version is incremented each time the document is updated. This parameter is only returned for successful actions.
  optional int64 x_version = 10;
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 11;
  // [optional]
  optional InlineGetDictUserDefined get = 12;
}


message InlineGetDictUserDefined {
  // [optional]
  ObjectMap metadata_fields = 1;
  // [optional]
  ObjectMap fields = 2;
  // [required] Whether the document exists.
  bool found = 3;
  // [optional] The sequence number assigned to the document for the operation. Sequence numbers are used to ensure an older version of a document doesn't overwrite a newer version
  optional int64 seq_no = 4;
  // [optional] The primary term assigned to the document for the operation.
  optional int64 x_primary_term = 5;
  // [optional] Custom value used to route operations to a specific shard.
  string x_routing = 6;
  // [optional] Contains the document's data
  optional bytes x_source = 7;
}

enum Refresh {
  REFRESH_UNSPECIFIED = 0;
  REFRESH_FALSE = 1;
  REFRESH_TRUE = 2;
  REFRESH_WAIT_FOR = 3;
}

// index document.
message IndexDocumentRequest {
  // [optional] Creates or indexes a specific ID.
  optional string id = 1;
  // [optional] Name of the data stream or index to target.
  optional string index = 2;
  // [optional] Only perform the operation if the document has this primary term. Can not be set if op_type=create.
  optional int64 if_primary_term = 3;
  // [optional] Only perform the operation if the document has this sequence number. Can not be set if op_type=create.
  optional int64 if_seq_no = 4;

  // [optional] Set to create to only index the document if it does not already exist (put if absent). If a document with the specified `_id` already exists, the indexing operation will fail. Same as using the `<index>/_create` endpoint. Valid values: `index`, `create`. If document id is specified, it defaults to `index`. Otherwise, it defaults to `create`.
  optional OpType op_type = 5;
  // [optional] ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 6;

  // [optional] enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 7;
  // [optional] If `true`, the request's actions must target an index alias. Defaults to false. Can not be set if op_type=create.
  optional bool require_alias = 8;
  // [optional] Custom value used to route operations to a specific shard.
  optional string routing = 9;
  // [optional] Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  // Pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  // Defaults to 1m (one minute). This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  optional string timeout = 10;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 11;

  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 12;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 13;
  // [required] contain the information you want to index.
  // Provide document either as ObjectMap or bytes
  oneof index_document_request_request_body {
    ObjectMap request_body = 14;

    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes bytes_request_body = 15;
  }
  // [optional] Controls how document source fields are returned in the response.
  // - If not set, source is returned as bytes (default, recommended for better performance)
  // - If set to SOURCE_TYPE_STRUCT: source is returned as a structured protobuf message
  // Note: Using SOURCE_TYPE_STRUCT may impact performance due to additional serialization overhead
  optional SourceType source_type = 16;
}


enum Result {
  RESULT_UNSPECIFIED = 0;
  RESULT_CREATED = 1;
  RESULT_DELETED = 2;
  RESULT_NOOP = 3;
  RESULT_NOT_FOUND = 4;
  RESULT_UPDATED = 5;
}

// The response from index document request
message IndexDocumentResponse {
  // [optional] The document type.
  optional string x_type = 1;
  // [optional] The document's ID.
  optional string x_id = 2;
  // [optional] The name of the index.
  optional string x_index = 3;
  // [optional] The primary term assigned when the document was indexed.
  optional int64 x_primary_term = 4;

  // [optional] The result of the index operation.
  optional Result result = 5;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 x_seq_no = 6;
  // [optional] Detailed information about the cluster's shards.
  optional ShardStatistics x_shards = 7;
  // [optional] The document's version.
  optional int64 x_version = 8;
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 9;
}

// Delete index document with Id request
message DeleteDocumentRequest {
  // [required] Unique identifier for the document.
  string id = 1;
  // [required] Name of the target index.
  string index = 2;
  // [optional] Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 3;
  // [optional] Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 4;

  // [optional] enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 5;
  // Custom value used to route operations to a specific shard.
  optional string routing = 6;
  // [optional] Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  // Pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  // Defaults to 1m (one minute). This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  optional string timeout = 7;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 8;
  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 9;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 10;
}

// The response from delete index document with Id request
message DeleteDocumentResponse {
  // [optional] The document type.
  optional string x_type = 1;
  // [optional] The document's ID.
  optional string x_id = 2;
  // [optional] The name of the index.
  optional string x_index = 3;
  // [optional] The primary term assigned when the document was indexed.
  optional int64 x_primary_term = 4;
  // [optional] The result of the index operation.
  optional Result result = 5;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 x_seq_no = 6;
  // [optional] Detailed information about the cluster's shards.
  ShardStatistics x_shards = 7;
  // [optional] The document's version.
  optional int64 x_version = 8;
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 9;

}

// Update index document with Id request
message UpdateDocumentRequest {
  // [optional] Unique identifier for the document.
  optional string id = 1;
  // [optional] Name of the data stream or index to target. If the target doesn't exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream. If the target doesn't exist and doesn't match a data stream template, this request creates the index.
  optional string index = 2;
  // [optional] Set to false to disable source retrieval. You can also specify a comma-separated list of the fields you want to retrieve.
  optional SourceConfigParam x_source = 3;
  // [optional] A comma-separated list of source fields to exclude from the response.
  repeated string x_source_excludes = 4;
  // [optional] A comma-separated list of source fields to include in the response.
  repeated string x_source_includes = 5;
  // [optional] Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 6;
  // [optional] Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 7;
  // [optional] The script language.
  optional string lang = 8;

  // [optional] enum of whether to refresh the affected shards after performing the indexing operations. Default is false
  optional Refresh refresh = 9;
  // [optional] If `true`, the request's actions must target an index alias. Defaults to false.
  optional bool require_alias = 10;
  // Specify how many times should the operation be retried when a conflict occurs.
  optional int32 retry_on_conflict = 11;
  // Custom value used to route operations to a specific shard.
  optional string routing = 12;
  // Period to wait for dynamic mapping updates and active shards. This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  // Pattern: ^([0-9\.]+)(?:d|h|m|s|ms|micros|nanos)$
  optional string timeout = 13;
  // [optional] The number of active shards that must be available before OpenSearch processes the request. Default is 1 (only the primary shard). Set to all or a positive integer. Values greater than 1 require replicas. For example, if you specify a value of 3, the index must have two replicas distributed across two additional nodes for the operation to succeed.
  optional WaitForActiveShards wait_for_active_shards = 14;
  // [required] The update document request body
  UpdateDocumentRequestBody request_body = 15;

  // [optional] Controls how document source fields are returned in the response.
  // - If not set, source is returned as bytes (default, recommended for better performance)
  // - If set to SOURCE_TYPE_STRUCT: source is returned as a structured protobuf message
  // Note: Using SOURCE_TYPE_STRUCT may impact performance due to additional serialization overhead
  optional SourceType source_type = 16;
}

message UpdateDocumentRequestBody {
  // [optional] Controls whether an operation is ignored if there is no change. Default is true.
  optional bool detect_noop = 1;

  // [optional] A partial update to an existing document.
  // Opt for either ObjectMap or bytes
  oneof update_document_request_body_doc {
    ObjectMap doc = 2;

    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes bytes_doc = 8;
  }

  // [optional] Set to true to use the contents of 'doc' as the value of 'upsert'
  optional bool doc_as_upsert = 3;
  // [optional] Script for more complex document updates by defining the script with the `source` or `id` from a document
  optional Script script = 4;

  //[optional] Set to true to execute the script whether or not the document exists.
  optional bool scripted_upsert = 5;
  // [optional] Defines how to fetch a source. Fetching can be disabled entirely, or the source can be filtered.
  optional SourceConfig x_source = 6;

  // [optional] If the document does not already exist, the contents of 'upsert' are inserted as a new document. If the document exists, the 'script' is executed.
  // Provide document either as ObjectMap or bytes
  oneof update_document_request_body_upsert {
    ObjectMap upsert = 7;

    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes bytes_upsert = 9;
  }
}

// The response from update index document with Id request
message UpdateDocumentResponse {
  // [optional] The document type.
  optional string x_type = 1;
  // [optional] The document's ID.
  optional string x_id = 2;
  // [optional] The name of the index.
  optional string x_index = 3;
  // [optional] The primary term assigned when the document was indexed.
  optional int64 x_primary_term = 4;
  // [optional] The result of the index operation.
  optional Result result = 5;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 x_seq_no = 6;
  // [optional] Detailed information about the cluster's shards.
  ShardStatistics x_shards = 7;
  // [optional] The document's version.
  optional int64 x_version = 8;
  // [optional] if `true`, it requires immediate visibility of the document
  optional bool forced_refresh = 9;
  // [optional]
  optional InlineGet get = 10;
}

// Get document request with document ID specified
message GetDocumentRequest {
  // [required] Unique identifier for the document.
  string id = 1;
  // [required] Name of the data stream or index to target. If the target doesn't exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream. If the target doesn't exist and doesn't match a data stream template, this request creates the index.
  string index = 2;
  // [optional] Set to false to disable source retrieval. You can also specify a comma-separated list of the fields you want to retrieve. Default is true.
  optional SourceConfigParam x_source = 3;
  // [optional] A comma-separated list of source fields to exclude from the response.
  repeated string x_source_excludes = 4;
  // [optional] A comma-separated list of source fields to include in the response.
  repeated string x_source_includes = 5;
  // [optional] Specifies a preference of which shard to retrieve results from. Available options are _local, which tells the operation to retrieve results from a locally allocated shard replica, and a custom string value assigned to a specific shard replica. By default, OpenSearch executes get document operations on random shards.
  optional string preference = 6;
  // [optional] Specifies whether the operation should run in realtime. If false, the operation waits for the index to refresh to analyze the source to retrieve data, which makes the operation near-realtime. Default is true.
  optional bool realtime = 7;
  // [optional] If true, OpenSearch refreshes shards to make the get operation available to search results. Valid options are true, false, and wait_for, which tells OpenSearch to wait for a refresh before executing the operation. Default is false.
  optional bool refresh = 8;
  // [optional] A value used to route the operation to a specific shard.
  optional string routing = 9;
  // [optional] List of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the `_source` parameter defaults to false.
  repeated string stored_fields = 10;
  // [optional] Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 11;
  // [optional] Assigns a specific type to the document.
  optional VersionType version_type = 12;

  // [optional] Controls how document source fields are returned in the response.
  // - If not set, source is returned as bytes (default, recommended for better performance)
  // - If set to SOURCE_TYPE_STRUCT: source is returned as a structured protobuf message
  // Note: Using SOURCE_TYPE_STRUCT may impact performance due to additional serialization overhead
  optional SourceType source_type = 13;
}

// The response from get document request with document ID specified request
message GetDocumentResponse {
  // [optional] The document type.
  optional string x_type = 1;
  // [optional] The name of the index.
  optional string x_index = 2;
  // [optional] Contains the document's data that's stored in the index. Only returned if both stored_fields and found are true.
  optional ObjectMap fields = 3;
  // [optional] Whether the document exists.
  optional bool found = 4;
  // [optional] The document's ID.
  optional string x_id = 5;
  // [optional] The primary term assigned when the document is indexed.
  optional int64 x_primary_term = 6;
  // [optional] The shard that the document is routed to. If the document is not routed to a particular shard, this field is omitted.
  optional string x_routing = 7;
  // [optional] The sequence number assigned when the document was indexed.
  optional int64 x_seq_no = 8;
  // [optional] Contains the document's data if found is true. If _source is set to false or stored_fields is set to true in the URL parameters, this field is omitted.
  // Source to be returned as either an Struct or bytes
  oneof get_document_response_body_source {

    // struct_source field to be returned upon explicit request by user
    .google.protobuf.Struct struct_source = 9;
    // Use bytes for better latency/performance, as it reduces payload size over the wire
    bytes x_source = 11;

  }
  // [optional] The document's version number. Updated whenever the document changes.
  optional int64 x_version = 10;
}
