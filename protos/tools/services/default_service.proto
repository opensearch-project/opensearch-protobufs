/*
  OpenSearch API Specification

  No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

  The version of the OpenAPI document: 0.2.0

  Generated by OpenAPI Generator: https://openapi-generator.tech
*/

syntax = "proto3";

package openapitools.services.defaultservice;

import "google/protobuf/empty.proto";
import public "google/protobuf/struct.proto";
import public "models/aggregated_models.proto";

message BulkRequest {
  // Name of the data stream, index, or index alias to perform bulk actions on.
  string index = 1;
  repeated BulkRequestInner bulk_request_inner = 2;
  // `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;
  // A comma-separated list of source fields to exclude from the response.
  optional Fields underscore_source_excludes = 4;
  // A comma-separated list of source fields to include in the response.
  optional Fields underscore_source_includes = 5;
  // ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 6;
  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes. Valid values: `true`, `false`, `wait_for`.
  optional Refresh refresh = 7;
  // If `true`, the request's actions must target an index alias.
  optional bool require_alias = 8;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 9;
  // Period each action waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  optional string timeout = 10;
  // Default document type for items which don't provide one.
  optional string type = 11;
  // The number of shard copies that must be active before proceeding with the operation. Set to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
  optional WaitForActiveShards wait_for_active_shards = 12;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 13;
  // Whether to return human readable values for statistics.
  optional bool human = 14;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 15;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 16;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 17;

}


message BulkResponse {
    oneof response {
        InlineObject inline_object = 1;
    }
}
message CreateRequest {
  // Unique identifier for the document.
  string id = 1;
  // Name of the data stream or index to target. If the target doesn't exist and matches the name or wildcard (`*`) pattern of an index template with a `data_stream` definition, this request creates the data stream. If the target doesn't exist and doesn't match a data stream template, this request creates the index.
  string index = 2;
  google.protobuf.Struct body = 3;
  // ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 4;
  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes. Valid values: `true`, `false`, `wait_for`.
  optional Refresh refresh = 5;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 6;
  // Period the request waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  optional string timeout = 7;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 8;
  // Specific version type: `external`, `external_gte`.
  optional VersionType version_type = 9;
  // The number of shard copies that must be active before proceeding with the operation. Set to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
  optional WaitForActiveShards wait_for_active_shards = 10;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 11;
  // Whether to return human readable values for statistics.
  optional bool human = 12;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 13;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 14;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 15;

}


message CreateResponse {
    oneof response {
        WriteResponseBase write_response_base = 1;
    }
}
message DeleteRequest {
  // Unique identifier for the document.
  string id = 1;
  // Name of the target index.
  string index = 2;
  // Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 3;
  // Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 4;
  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes. Valid values: `true`, `false`, `wait_for`.
  optional Refresh refresh = 5;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 6;
  // Period to wait for active shards.
  optional string timeout = 7;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 8;
  // Specific version type: `external`, `external_gte`.
  optional VersionType version_type = 9;
  // The number of shard copies that must be active before proceeding with the operation. Set to `all` or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
  optional WaitForActiveShards wait_for_active_shards = 10;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 11;
  // Whether to return human readable values for statistics.
  optional bool human = 12;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 13;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 14;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 15;

}


message DeleteResponse {
    oneof response {
        WriteResponseBase write_response_base = 1;
        WriteResponseBase write_response_base = 2;
    }
}
message ExistsRequest {
  // Identifier of the document.
  string id = 1;
  // Comma-separated list of data streams, indexes, and aliases. Supports wildcards (`*`).
  string index = 2;
  // `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;
  // A comma-separated list of source fields to exclude in the response.
  optional Fields underscore_source_excludes = 4;
  // A comma-separated list of source fields to include in the response.
  optional Fields underscore_source_includes = 5;
  // Specifies the node or shard the operation should be performed on. Random by default.
  optional string preference = 6;
  // If `true`, the request is real-time as opposed to near-real-time.
  optional bool realtime = 7;
  // If `true`, OpenSearch refreshes all shards involved in the delete by query after the request completes.
  optional Refresh refresh = 8;
  // Target the specified primary shard.
  optional StringOrStringArray routing = 9;
  // List of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the `_source` parameter defaults to false.
  optional Fields stored_fields = 10;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 11;
  // Specific version type: `external`, `external_gte`.
  optional VersionType version_type = 12;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 13;
  // Whether to return human readable values for statistics.
  optional bool human = 14;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 15;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 16;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 17;

}


message ExistsResponse {
    oneof response {
        google.protobuf.Empty empty = 1;
        google.protobuf.Empty empty = 2;
    }
}
message ExistsSourceRequest {
  // Identifier of the document.
  string id = 1;
  // Comma-separated list of data streams, indexes, and aliases. Supports wildcards (`*`).
  string index = 2;
  // `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;
  // A comma-separated list of source fields to exclude in the response.
  optional Fields underscore_source_excludes = 4;
  // A comma-separated list of source fields to include in the response.
  optional Fields underscore_source_includes = 5;
  // Specifies the node or shard the operation should be performed on. Random by default.
  optional string preference = 6;
  // If `true`, the request is real-time as opposed to near-real-time.
  optional bool realtime = 7;
  // If `true`, OpenSearch refreshes all shards involved in the delete by query after the request completes.
  optional Refresh refresh = 8;
  // Target the specified primary shard.
  optional StringOrStringArray routing = 9;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 10;
  // Specific version type: `external`, `external_gte`.
  optional VersionType version_type = 11;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 12;
  // Whether to return human readable values for statistics.
  optional bool human = 13;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 14;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 15;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 16;

}


message ExistsSourceResponse {
    oneof response {
        google.protobuf.Empty empty = 1;
        google.protobuf.Empty empty = 2;
    }
}
message ExplainRequest {
  // Defines the document ID.
  string id = 1;
  // Index names used to limit the request. Only a single index name can be provided to this parameter.
  string index = 2;
  // Set to `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;
  // A comma-separated list of source fields to exclude from the response.
  optional Fields underscore_source_excludes = 4;
  // A comma-separated list of source fields to include in the response.
  optional Fields underscore_source_includes = 5;
  // If `true`, wildcard and prefix queries are analyzed.
  optional bool analyze_wildcard = 6;
  // Analyzer to use for the query string. This parameter can only be used when the `q` query string parameter is specified.
  optional string analyzer = 7;
  // The default operator for query string query: `AND` or `OR`.
  optional Operator default_operator = 8;
  // Field to use as default where no field prefix is given in the query string.
  optional string df = 9;
  // If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored.
  optional bool lenient = 10;
  // Specifies the node or shard the operation should be performed on. Random by default.
  optional string preference = 11;
  // Query in the Lucene query string syntax.
  optional string q = 12;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 13;
  // A comma-separated list of stored fields to return in the response.
  optional Fields stored_fields = 14;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 15;
  // Whether to return human readable values for statistics.
  optional bool human = 16;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 17;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 18;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 19;
  optional ExplainRequest explain_request = 20;

}


message ExplainResponse {
    oneof response {
        InlineObject1 inline_object1 = 1;
    }
}
message GetRequest {
  // Unique identifier of the document.
  string id = 1;
  // Name of the index that contains the document.
  string index = 2;
  // Set to `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;
  // A comma-separated list of source fields to exclude in the response.
  optional Fields underscore_source_excludes = 4;
  // A comma-separated list of source fields to include in the response.
  optional Fields underscore_source_includes = 5;
  // Specifies the node or shard the operation should be performed on. Random by default.
  optional string preference = 6;
  // If `true`, the request is real-time as opposed to near-real-time.
  optional bool realtime = 7;
  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search. If `false`, do nothing with refreshes.
  optional Refresh refresh = 8;
  // Target the specified primary shard.
  optional StringOrStringArray routing = 9;
  // List of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the `_source` parameter defaults to false.
  optional Fields stored_fields = 10;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 11;
  // Specific version type: `internal`, `external`, `external_gte`.
  optional VersionType version_type = 12;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 13;
  // Whether to return human readable values for statistics.
  optional bool human = 14;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 15;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 16;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 17;

}


message GetResponse {
    oneof response {
        GetResult get_result = 1;
        GetResult get_result = 2;
    }
}
message GetSourceRequest {
  // Unique identifier of the document.
  string id = 1;
  // Name of the index that contains the document.
  string index = 2;
  // Set to `true` or `false` to return the `_source` field or not, or a list of fields to return.
  optional SourceConfigParam underscore_source = 3;
  // A comma-separated list of source fields to exclude in the response.
  optional Fields underscore_source_excludes = 4;
  // A comma-separated list of source fields to include in the response.
  optional Fields underscore_source_includes = 5;
  // Specifies the node or shard the operation should be performed on. Random by default.
  optional string preference = 6;
  // Boolean) If `true`, the request is real-time as opposed to near-real-time.
  optional bool realtime = 7;
  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search. If `false`, do nothing with refreshes.
  optional Refresh refresh = 8;
  // Target the specified primary shard.
  optional StringOrStringArray routing = 9;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 10;
  // Specific version type. One of `internal`, `external`, `external_gte`.
  optional VersionType version_type = 11;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 12;
  // Whether to return human readable values for statistics.
  optional bool human = 13;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 14;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 15;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 16;

}


message GetSourceResponse {
    oneof response {
        google.protobuf.Struct google_protobuf_struct = 1;
        ErrorResponse error_response = 2;
    }
}
message IndexRequest {
  // Unique identifier for the document.
  string id = 1;
  // Name of the data stream or index to target.
  string index = 2;
  google.protobuf.Struct body = 3;
  // Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 4;
  // Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 5;
  // Set to create to only index the document if it does not already exist (put if absent). If a document with the specified `_id` already exists, the indexing operation will fail. Same as using the `<index>/_create` endpoint. Valid values: `index`, `create`. If document id is specified, it defaults to `index`. Otherwise, it defaults to `create`.
  optional OpType op_type = 6;
  // ID of the pipeline to use to preprocess incoming documents. If the index has a default ingest pipeline specified, then setting the value to `_none` disables the default ingest pipeline for this request. If a final pipeline is configured it will always run, regardless of the value of this parameter.
  optional string pipeline = 7;
  // If `true`, OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes. Valid values: `true`, `false`, `wait_for`.
  optional Refresh refresh = 8;
  // If `true`, the destination must be an index alias.
  optional bool require_alias = 9;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 10;
  // Period the request waits for the following operations: automatic index creation, dynamic mapping updates, waiting for active shards.
  optional string timeout = 11;
  // Explicit version number for concurrency control. The specified version must match the current version of the document for the request to succeed.
  optional int64 version = 12;
  // Specific version type: `external`, `external_gte`.
  optional VersionType version_type = 13;
  // The number of shard copies that must be active before proceeding with the operation. Set to all or any positive integer up to the total number of shards in the index (`number_of_replicas+1`).
  optional WaitForActiveShards wait_for_active_shards = 14;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 15;
  // Whether to return human readable values for statistics.
  optional bool human = 16;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 17;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 18;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 19;

}


message IndexResponse {
    oneof response {
        WriteResponseBase write_response_base = 1;
        WriteResponseBase write_response_base = 2;
    }
}
message SearchRequest {
  // Comma-separated list of data streams, indexes, and aliases to search. Supports wildcards (`*`). To search all data streams and indexes, omit this parameter or use `*` or `_all`.
  Indices index = 1;
  // Indicates which source fields are returned for matching documents. These fields are returned in the `hits._source` property of the search response. Valid values are: `true` to return the entire document source; `false` to not return the document source; `<string>` to return the source fields that are specified as a comma-separated list (supports wildcard (`*`) patterns).
  optional SourceConfigParam underscore_source = 2;
  // A comma-separated list of source fields to exclude from the response. You can also use this parameter to exclude fields from the subset specified in `_source_includes` query parameter. If the `_source` parameter is `false`, this parameter is ignored.
  optional Fields underscore_source_excludes = 3;
  // A comma-separated list of source fields to include in the response. If this parameter is specified, only these source fields are returned. You can exclude fields from this subset using the `_source_excludes` query parameter. If the `_source` parameter is `false`, this parameter is ignored.
  optional Fields underscore_source_includes = 4;
  // If `false`, the request returns an error if any wildcard expression, index alias, or `_all` value targets only missing or closed indexes. This behavior applies even if the request targets other open indexes. For example, a request targeting `foo*,bar*` returns an error if an index starts with `foo` but no index starts with `bar`.
  optional bool allow_no_indices = 5;
  // If `true`, returns partial results if there are shard request timeouts or shard failures. If `false`, returns an error with no partial results.
  optional bool allow_partial_search_results = 6;
  // If `true`, wildcard and prefix queries are analyzed. This parameter can only be used when the q query string parameter is specified.
  optional bool analyze_wildcard = 7;
  // Analyzer to use for the query string. This parameter can only be used when the q query string parameter is specified.
  optional string analyzer = 8;
  // The number of shard results that should be reduced at once on the coordinating node. This value should be used as a protection mechanism to reduce the memory overhead per search request if the potential number of shards in the request can be large.
  optional int32 batched_reduce_size = 9;
  // The time after which the search request will be canceled. Request-level parameter takes precedence over `cancel_after_time_interval` cluster setting.
  optional string cancel_after_time_interval = 10;
  // If `true`, network round-trips between the coordinating node and the remote clusters are minimized when executing cross-cluster search (CCS) requests.
  optional bool ccs_minimize_roundtrips = 11;
  // The default operator for query string query: AND or OR. This parameter can only be used when the `q` query string parameter is specified.
  optional Operator default_operator = 12;
  // Field to use as default where no field prefix is given in the query string. This parameter can only be used when the q query string parameter is specified.
  optional string df = 13;
  // A comma-separated list of fields to return as the docvalue representation for each hit.
  optional Fields docvalue_fields = 14;
  // Type of index that wildcard patterns can match. If the request can target data streams, this argument determines whether wildcard expressions match hidden data streams. Supports comma-separated values, such as `open,hidden`.
  optional ExpandWildcards expand_wildcards = 15;
  // If `true`, returns detailed information about score computation as part of a hit.
  optional bool explain = 16;
  // Starting document offset. Needs to be non-negative. By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters. To page through more hits, use the `search_after` parameter.
  optional int32 from = 17;
  // If `true`, concrete, expanded or aliased indexes will be ignored when frozen.
  optional bool ignore_throttled = 18;
  // If `false`, the request returns an error if it targets a missing or closed index.
  optional bool ignore_unavailable = 19;
  // Indicates whether `hit.matched_queries` should be rendered as a map that includes the name of the matched query associated with its score (true) or as an array containing the name of the matched queries (false)
  optional bool include_named_queries_score = 20;
  // If `true`, format-based query failures (such as providing text to a numeric field) in the query string will be ignored. This parameter can only be used when the `q` query string parameter is specified.
  optional bool lenient = 21;
  // Defines the number of concurrent shard requests per node this search executes concurrently. This value should be used to limit the impact of the search on the cluster in order to limit the number of concurrent shard requests.
  optional int32 max_concurrent_shard_requests = 22;
  // Indicates whether to return phase-level `took` time values in the response.
  optional bool phase_took = 23;
  // Defines a threshold that enforces a pre-filter roundtrip to prefilter search shards based on query rewriting if the number of shards the search request expands to exceeds the threshold. This filter roundtrip can limit the number of shards significantly if for instance a shard can not match any documents based on its rewrite method (if date filters are mandatory to match but the shard bounds and the query are disjoint). When unspecified, the pre-filter phase is executed if any of these conditions is met: the request targets more than 128 shards; the request targets one or more read-only index; the primary sort of the query targets an indexed field.
  optional int32 pre_filter_shard_size = 24;
  // Nodes and shards used for the search. By default, OpenSearch selects from eligible nodes and shards using adaptive replica selection, accounting for allocation awareness. Valid values are: `_only_local` to run the search only on shards on the local node; `_local` to, if possible, run the search on shards on the local node, or if not, select shards using the default method; `_only_nodes:<node-id>,<node-id>` to run the search on only the specified nodes IDs, where, if suitable shards exist on more than one selected node, use shards on those nodes using the default method, or if none of the specified nodes are available, select shards from any available node using the default method; `_prefer_nodes:<node-id>,<node-id>` to if possible, run the search on the specified nodes IDs, or if not, select shards using the default method; `_shards:<shard>,<shard>` to run the search only on the specified shards; `<custom-string>` (any string that does not start with `_`) to route searches with the same `<custom-string>` to the same shards in the same order.
  optional string preference = 25;
  // Query in the Lucene query string syntax using query parameter search. Query parameter searches do not support the full OpenSearch Query DSL but are handy for testing.
  optional string q = 26;
  // If `true`, the caching of search results is enabled for requests where `size` is `0`. Defaults to index level settings.
  optional bool request_cache = 27;
  // Indicates whether `hits.total` should be rendered as an integer or an object in the rest search response.
  optional bool rest_total_hits_as_int = 28;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 29;
  // Period to retain the search context for scrolling. See Scroll search results. By default, this value cannot exceed `1d` (24 hours). You can change this limit using the `search.max_keep_alive` cluster-level setting.
  optional string scroll = 30;
  // Customizable sequence of processing stages applied to search queries.
  optional string search_pipeline = 31;
  // How distributed term frequencies are calculated for relevance scoring.
  optional SearchType search_type = 32;
  // If `true`, returns sequence number and primary term of the last modification of each hit.
  optional bool seq_no_primary_term = 33;
  // Defines the number of hits to return. By default, you cannot page through more than 10,000 hits using the `from` and `size` parameters. To page through more hits, use the `search_after` parameter.
  optional int32 size = 34;
  // A comma-separated list of <field>:<direction> pairs.
  optional StringOrStringArray sort = 35;
  // Specific `tag` of the request for logging and statistical purposes.
  repeated string stats = 36;
  // A comma-separated list of stored fields to return as part of a hit. If no fields are specified, no stored fields are included in the response. If this field is specified, the `_source` parameter defaults to `false`. You can pass `_source: true` to return both source fields and stored fields in the search response.
  optional Fields stored_fields = 37;
  // Specifies which field to use for suggestions.
  optional string suggest_field = 38;
  // Specifies the suggest mode. This parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.
  optional SuggestMode suggest_mode = 39;
  // Number of suggestions to return. This parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.
  optional int32 suggest_size = 40;
  // The source text for which the suggestions should be returned. This parameter can only be used when the `suggest_field` and `suggest_text` query string parameters are specified.
  optional string suggest_text = 41;
  // Maximum number of documents to collect for each shard. If a query reaches this limit, OpenSearch terminates the query early. OpenSearch collects documents before sorting. Use with caution. OpenSearch applies this parameter to each shard handling the request. When possible, let OpenSearch perform early termination automatically. Avoid specifying this parameter for requests that target data streams with backing indexes across multiple data tiers. If set to `0` (default), the query does not terminate early.
  optional int32 terminate_after = 42;
  // Specifies the period of time to wait for a response from each shard. If no response is received before the timeout expires, the request fails and returns an error.
  optional string timeout = 43;
  // If `true`, calculate and return document scores, even if the scores are not used for sorting.
  optional bool track_scores = 44;
  // Number of hits matching the query to count accurately. If `true`, the exact number of hits is returned at the cost of some performance. If `false`, the response does not include the total number of hits matching the query.
  optional TrackHits track_total_hits = 45;
  // If `true`, aggregation and suggester names are be prefixed by their respective types in the response.
  optional bool typed_keys = 46;
  // If `true`, returns document version as part of a hit.
  optional bool version = 47;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 48;
  // Whether to return human readable values for statistics.
  optional bool human = 49;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 50;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 51;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 52;
  optional SearchRequest search_request = 53;

}


message SearchResponse {
    oneof response {
        ResponseBody response_body = 1;
        ErrorResponse error_response = 2;
        ErrorResponse error_response = 3;
    }
}
message UpdateRequest {
  // Document ID
  string id = 1;
  // The name of the index
  string index = 2;
  UpdateRequest update_request = 3;
  // Set to `false` to disable source retrieval. You can also specify a comma-separated list of the fields you want to retrieve.
  optional SourceConfigParam underscore_source = 4;
  // Specify the source fields you want to exclude.
  optional Fields underscore_source_excludes = 5;
  // Specify the source fields you want to retrieve.
  optional Fields underscore_source_includes = 6;
  // Only perform the operation if the document has this primary term.
  optional int64 if_primary_term = 7;
  // Only perform the operation if the document has this sequence number.
  optional int64 if_seq_no = 8;
  // The script language.
  optional string lang = 9;
  // If 'true', OpenSearch refreshes the affected shards to make this operation visible to search, if `wait_for` then wait for a refresh to make this operation visible to search, if `false` do nothing with refreshes.
  optional Refresh refresh = 10;
  // If `true`, the destination must be an index alias.
  optional bool require_alias = 11;
  // Specify how many times should the operation be retried when a conflict occurs.
  optional int32 retry_on_conflict = 12;
  // Custom value used to route operations to a specific shard.
  optional StringOrStringArray routing = 13;
  // Period to wait for dynamic mapping updates and active shards. This guarantees OpenSearch waits for at least the timeout before failing. The actual wait time could be longer, particularly when multiple waits occur.
  optional string timeout = 14;
  // The number of shard copies that must be active before proceeding with the operations. Set to 'all' or any positive integer up to the total number of shards in the index (number_of_replicas+1). Defaults to 1 meaning the primary shard.
  optional WaitForActiveShards wait_for_active_shards = 15;
  // Whether to pretty format the returned JSON response.
  optional bool pretty = 16;
  // Whether to return human readable values for statistics.
  optional bool human = 17;
  // Whether to include the stack trace of returned errors.
  optional bool error_trace = 18;
  // The URL-encoded request definition. Useful for libraries that do not accept a request body for non-POST requests.
  optional string source = 19;
  // Used to reduce the response. This parameter takes a comma-separated list of filters. It supports using wildcards to match any field or part of a field’s name. You can also exclude fields with \"-\".
  optional StringOrStringArray filter_path = 20;

}


message UpdateResponse {
    oneof response {
        UpdateWriteResponseBase update_write_response_base = 1;
    }
}
